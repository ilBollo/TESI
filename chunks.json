[
    {
        "id": 1,
        "text": "import java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\npublic class DateUtil {\n\n    /**\n     * Formatta una data nel formato \"dd/MM/yyyy\".\n     *\n     * @param date La data da formattare.\n     * @return La data formattata come stringa.\n     */\n    public static String formatDate(Date date) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n        return sdf.format(date);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 2,
        "text": "/**\n     * Formatta una data nel formato specificato.\n     *\n     * @param date   La data da formattare.\n     * @param format Il formato desiderato (es. \"yyyy-MM-dd\").\n     * @return La data formattata come stringa.\n     */\n    public static String formatDate(Date date, String format) {\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\n        return sdf.format(date);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 3,
        "text": "/**\n     * Converte una stringa in un oggetto Date.\n     *\n     * @param dateString La stringa da convertire (es. \"31/12/2023\").\n     * @param format     Il formato della stringa (es. \"dd/MM/yyyy\").\n     * @return L'oggetto Date corrispondente.\n     * @throws ParseException Se la stringa non Ã¨ nel formato corretto.\n     */\n    public static Date parseDate(String dateString, String format) throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat(format);",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 4,
        "text": "SimpleDateFormat sdf = new SimpleDateFormat(format);\n        return sdf.parse(dateString);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 5,
        "text": "/**\n     * Calcola la differenza in giorni tra due date.\n     *\n     * @param startDate La data di inizio.\n     * @param endDate   La data di fine.\n     * @return La differenza in giorni.\n     */\n    public static long getDifferenceInDays(Date startDate, Date endDate) {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());\n        return TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 6,
        "text": "/**\n     * Calcola la differenza in ore tra due date.\n     *\n     * @param startDate La data di inizio.\n     * @param endDate   La data di fine.\n     * @return La differenza in ore.\n     */\n    public static long getDifferenceInHours(Date startDate, Date endDate) {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());\n        return TimeUnit.HOURS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 7,
        "text": "/**\n     * Aggiunge un numero specificato di giorni a una data.\n     *\n     * @param date  La data di partenza.\n     * @param days  Il numero di giorni da aggiungere.\n     * @return La nuova data.\n     */\n    public static Date addDays(Date date, int days) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        calendar.add(Calendar.DAY_OF_YEAR, days);\n        return calendar.getTime();\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 8,
        "text": "/**\n     * Verifica se una data Ã¨ nel passato rispetto alla data corrente.\n     *\n     * @param date La data da verificare.\n     * @return True se la data Ã¨ nel passato, altrimenti False.\n     */\n    public static boolean isPastDate(Date date) {\n        Date currentDate = new Date();\n        return date.before(currentDate);\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 9,
        "text": "/**\n     * Verifica se una data Ã¨ nel futuro rispetto alla data corrente.\n     *\n     * @param date La data da verificare.\n     * @return True se la data Ã¨ nel futuro, altrimenti False.\n     */\n    public static boolean isFutureDate(Date date) {\n        Date currentDate = new Date();\n        return date.after(currentDate);\n    }\n\n    /**\n     * Restituisce la data corrente.\n     *\n     * @return La data corrente.\n     */\n    public static Date getCurrentDate() {\n        return new Date();\n    }",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 10,
        "text": "// Esempio di utilizzo della libreria\n    public static void main(String[] args) {\n        try {\n            // Ottenere la data corrente\n            Date currentDate = DateUtil.getCurrentDate();\n            System.out.println(\"Data corrente: \" + DateUtil.formatDate(currentDate));\n\n            // Aggiungere 5 giorni alla data corrente\n            Date futureDate = DateUtil.addDays(currentDate, 5);\n            System.out.println(\"Data tra 5 giorni: \" + DateUtil.formatDate(futureDate));",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 11,
        "text": "// Verificare se la data Ã¨ nel futuro\n            if (DateUtil.isFutureDate(futureDate)) {\n                System.out.println(\"La data Ã¨ nel futuro!\");\n            }\n\n            // Calcolare la differenza in giorni tra due date\n            Date pastDate = DateUtil.parseDate(\"01/01/2023\", \"dd/MM/yyyy\");\n            long diffInDays = DateUtil.getDifferenceInDays(pastDate, currentDate);\n            System.out.println(\"Differenza in giorni: \" + diffInDays);",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    },
    {
        "id": 12,
        "text": "} catch (ParseException e) {\n            System.out.println(\"Errore nel parsing della data: \" + e.getMessage());\n        }\n    }\n}",
        "source": "DateUtil.java",
        "type": "code",
        "start_line": 0,
        "end_line": 0
    }
]