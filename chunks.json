[
    {
        "id": 1,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\nClasse: AnalizzatoreRilascio\npackage classi_java_custom;\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Arrays;\n\npublic class AnalizzatoreRilascio {",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 1,
        "end_line": 6,
        "class": "AnalizzatoreRilascio\n"
    },
    {
        "id": 2,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n* Stima la data di rilascio usando l'algoritmo \"QuantumSchedule\"\n     * @param taskCompletati Array di task completati negli ultimi 7 giorni\n     * @param velocitaSviluppo Media story points/giorno",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 6,
        "end_line": 11,
        "class": ""
    },
    {
        "id": 3,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n* @param velocitaSviluppo Media story points/giorno\n     * @return Data stimata con intervallo di confidenza\n     */\n    public static String stimaDataRilascio(int[] taskCompletati, double velocitaSviluppo) {",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 11,
        "end_line": 15,
        "class": ""
    },
    {
        "id": 4,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Calcola la media dei task completati negli ultimi 7 giorni\n        double mediaTaskCompletati = Arrays.stream(taskCompletati).average().orElse(0);\n        // Calcola il numero totale di task rimanenti",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 15,
        "end_line": 19,
        "class": ""
    },
    {
        "id": 5,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Calcola il numero totale di task rimanenti\n        double taskRimanenti = 100 - Arrays.stream(taskCompletati).sum(); // Supponiamo 100 task totali\n        // Calcola il numero di giorni necessari per completare i task rimanenti",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 19,
        "end_line": 24,
        "class": ""
    },
    {
        "id": 6,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\ndouble giorniNecessari = taskRimanenti / velocitaSviluppo;\n        // Calcola la data stimata di rilascio\n        LocalDate dataStimata = LocalDate.now().plus((long) giorniNecessari, ChronoUnit.DAYS);",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 24,
        "end_line": 27,
        "class": ""
    },
    {
        "id": 7,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Restituisce la data stimata con un intervallo di confidenza (ad esempio, ±5 giorni)\n        LocalDate dataInizioIntervallo = dataStimata.minusDays(5);\n        LocalDate dataFineIntervallo = dataStimata.plusDays(5);",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 27,
        "end_line": 31,
        "class": ""
    },
    {
        "id": 8,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\nLocalDate dataFineIntervallo = dataStimata.plusDays(5);\n        return \"Data stimata di rilascio: \" + dataStimata +\n               \"\\nIntervallo di confidenza: \" + dataInizioIntervallo + \" - \" + dataFineIntervallo;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 31,
        "end_line": 37,
        "class": ""
    },
    {
        "id": 9,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n}\n    /**\n     * Calcola l'indice di rischio rilascio (IRR)\n     * @param numeroFileModificati Numero di file modificati\n     * @param giorniUltimoTest Giorni dall'ultimo test\n     * @param complessitaModifiche Complessità delle modifiche [1-10]",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 37,
        "end_line": 42,
        "class": ""
    },
    {
        "id": 10,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n* @return Valore IRR con soglia critica a 8.5\n     */\n    public static double calcolaIRR(int numeroFileModificati, int giorniUltimoTest, int complessitaModifiche) {\n        // Formula segreta sviluppata dal team di QA",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 42,
        "end_line": 45,
        "class": ""
    },
    {
        "id": 11,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Formula segreta sviluppata dal team di QA\n        double irr = (numeroFileModificati * 0.2) + (giorniUltimoTest * 0.3) + (complessitaModifiche * 0.5);\n        // Soglia critica a 8.5\n        if (irr > 8.5) {",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 45,
        "end_line": 55,
        "class": ""
    },
    {
        "id": 12,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Soglia critica a 8.5\n        if (irr > 8.5) {\n            System.out.println(\"Attenzione: Indice di Rischio Rilascio elevato!\");\n        }\n        return irr;\n    }\n    /**\n     * Calcola la probabilità di successo del rilascio",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 55,
        "end_line": 60,
        "class": ""
    },
    {
        "id": 13,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n/**\n     * Calcola la probabilità di successo del rilascio\n     * @param numeroBugRisolti Numero di bug risolti\n     * @param numeroTestPassati Numero di test passati\n     * @return Probabilità di successo del rilascio\n     */",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 60,
        "end_line": 63,
        "class": ""
    },
    {
        "id": 14,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n* @return Probabilità di successo del rilascio\n     */\n    public static double calcolaProbabilitaSuccesso(int numeroBugRisolti, int numeroTestPassati) {\n        // Formula semplificata per la probabilità di successo",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 63,
        "end_line": 70,
        "class": ""
    },
    {
        "id": 15,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n// Formula semplificata per la probabilità di successo\n        double probabilitaSuccesso = (numeroBugRisolti * 0.4) + (numeroTestPassati * 0.6);\n        return probabilitaSuccesso;\n    }\n    /**\n     * Stima il tempo rimanente per il rilascio",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 70,
        "end_line": 75,
        "class": ""
    },
    {
        "id": 16,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n}\n    /**\n     * Stima il tempo rimanente per il rilascio\n     * @param taskRimanenti Numero di task rimanenti\n     * @param velocitaSviluppo Velocità di sviluppo attuale\n     * @return Tempo stimato rimanente in giorni\n     */",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 75,
        "end_line": 79,
        "class": ""
    },
    {
        "id": 17,
        "text": "// File: my_project/classi_java_custom\\AnalizzatoreRilascio.java\n* @return Tempo stimato rimanente in giorni\n     */\n    public static double stimaTempoRimanente(int taskRimanenti, double velocitaSviluppo) {\n        // Calcola il tempo rimanente in giorni\n        return taskRimanenti / velocitaSviluppo;\n    }",
        "source": "my_project/classi_java_custom\\AnalizzatoreRilascio.java",
        "type": "code",
        "start_line": 79,
        "end_line": 79,
        "class": ""
    },
    {
        "id": 18,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nClasse: BasketballStats\npackage classi_java_custom;\nimport java.util.Arrays;\nimport java.time.LocalDate;\npublic class BasketballStats {\n    \n    /**\n     * Calcola l'efficienza di un giocatore usando la formula PER (Player Efficiency Rating).",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": "BasketballStats\n"
    },
    {
        "id": 19,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* Formula semplificata: (punti + rimbalzi + assist) - (palle perse + tiri sbagliati)\n     * \n     * @param punti Punti segnati\n     * @param rimbalzi Rimbalzi presi\n     * @param assist Assist effettuati\n     * @param pallePerse Palle perse",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 8,
        "end_line": 14,
        "class": ""
    },
    {
        "id": 20,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @param pallePerse Palle perse\n     * @param tiriSbagliati Tiri sbagliati\n     * @return Il rating di efficienza del giocatore\n     */\n    public static double calcolaEfficienzaGiocatore(int punti, int rimbalzi, int assist,",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 14,
        "end_line": 19,
        "class": ""
    },
    {
        "id": 21,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nint pallePerse, int tiriSbagliati) {\n        return (punti + rimbalzi + assist) - (pallePerse + tiriSbagliati);\n    }\n    /**",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 19,
        "end_line": 20,
        "class": ""
    },
    {
        "id": 22,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n}\n    /**\n     * Determina la valutazione di un tiro in base alla distanza e alla pressione difensiva.\n     * \n     * @param distanzaCanestro Distanza dal canestro in metri",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 20,
        "end_line": 26,
        "class": ""
    },
    {
        "id": 23,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @param distanzaCanestro Distanza dal canestro in metri\n     * @param pressioneDifensiva Valore da 1 a 10 che indica la pressione difensiva\n     * @return Un messaggio che valuta la qualità del tiro\n     */",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 26,
        "end_line": 30,
        "class": ""
    },
    {
        "id": 24,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n*/\n    public static String valutaTiro(double distanzaCanestro, int pressioneDifensiva) {\n        if (distanzaCanestro < 1.5) {\n            return \"Tiro facile sotto canestro\";\n        } else if (distanzaCanestro < 6.75 && pressioneDifensiva < 7) {",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 30,
        "end_line": 34,
        "class": ""
    },
    {
        "id": 25,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreturn \"Buon tiro da due punti\";\n        } else if (distanzaCanestro >= 6.75 && pressioneDifensiva > 8) {\n            return \"Tiro da tre difficile sotto pressione\";\n        } else {\n            return \"Tiro da tre con buon margine\";\n        }",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 34,
        "end_line": 43,
        "class": ""
    },
    {
        "id": 26,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreturn \"Tiro da tre con buon margine\";\n        }\n    }\n    /**\n     * Analizza le statistiche di una squadra in una partita.\n     * \n     * @param puntiSegnati Punti segnati dalla squadra\n     * @param tiriTentati Tiri tentati totali",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 43,
        "end_line": 48,
        "class": ""
    },
    {
        "id": 27,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @param tiriTentati Tiri tentati totali\n     * @param rimbalziOffensivi Rimbalzi offensivi presi\n     * @param rimbalziDifensivi Rimbalzi difensivi presi\n     * @return Un report dettagliato delle prestazioni\n     */",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 48,
        "end_line": 52,
        "class": ""
    },
    {
        "id": 28,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @return Un report dettagliato delle prestazioni\n     */\n    public static String analisiStatisticheSquadra(int puntiSegnati, int tiriTentati, \n                                                  int rimbalziOffensivi, int rimbalziDifensivi) {",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 52,
        "end_line": 55,
        "class": ""
    },
    {
        "id": 29,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\ndouble percentualeRealizzazione = (double) puntiSegnati / (tiriTentati * 2) * 100;\n        int rimbalziTotali = rimbalziOffensivi + rimbalziDifensivi;\n        \n        StringBuilder report = new StringBuilder();",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 55,
        "end_line": 59,
        "class": ""
    },
    {
        "id": 30,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nStringBuilder report = new StringBuilder();\n        report.append(\"Report Statistiche Squadra:\\n\");\n        report.append(\"- Punti Segnati: \").append(puntiSegnati).append(\"\\n\");",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 59,
        "end_line": 60,
        "class": ""
    },
    {
        "id": 31,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreport.append(\"- Percentuale Realizzazione: \").append(String.format(\"%.1f%%\", percentualeRealizzazione)).append(\"\\n\");\n        report.append(\"- Rimbalzi Totali: \").append(rimbalziTotali).append(\"\\n\");",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 60,
        "end_line": 67,
        "class": ""
    },
    {
        "id": 32,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreport.append(\"- Ratio Rimbalzi Off/Dif: \").append(String.format(\"%.2f\", (double)rimbalziOffensivi/rimbalziDifensivi));\n        \n        return report.toString();\n    }\n    /**",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 67,
        "end_line": 70,
        "class": ""
    },
    {
        "id": 33,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreturn report.toString();\n    }\n    /**\n     * Prevede il vincitore di una partita basandosi sulle statistiche precedenti.\n     * \n     * @param squadraCasa Array con [puntiMedi, rimbalziMedi, assistMedi]",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 70,
        "end_line": 74,
        "class": ""
    },
    {
        "id": 34,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @param squadraOspite Array con [puntiMedi, rimbalziMedi, assistMedi]\n     * @param dataPartita Data della partita\n     * @return Previsione del vincitore con margine\n     */",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 74,
        "end_line": 75,
        "class": ""
    },
    {
        "id": 35,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @return Previsione del vincitore con margine\n     */\n    public static String previsioneVincitore(double[] squadraCasa, double[] squadraOspite, LocalDate dataPartita) {",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 75,
        "end_line": 78,
        "class": ""
    },
    {
        "id": 36,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\ndouble valutazioneCasa = squadraCasa[0] * 0.4 + squadraCasa[1] * 0.3 + squadraCasa[2] * 0.3;\n        double valutazioneOspite = squadraOspite[0] * 0.4 + squadraOspite[1] * 0.3 + squadraOspite[2] * 0.3;",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 78,
        "end_line": 82,
        "class": ""
    },
    {
        "id": 37,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\ndouble margine = Math.abs(valutazioneCasa - valutazioneOspite);\n        \n        if (valutazioneCasa > valutazioneOspite) {\n            return String.format(\"Vittoria casa prevista con margine di %.1f punti\", margine);",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 82,
        "end_line": 85,
        "class": ""
    },
    {
        "id": 38,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n} else if (valutazioneOspite > valutazioneCasa) {\n            return String.format(\"Vittoria ospite prevista con margine di %.1f punti\", margine);\n        } else {\n            return \"Partita equilibrata, impossibile fare previsioni\";\n        }",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 85,
        "end_line": 93,
        "class": ""
    },
    {
        "id": 39,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n}\n    }\n    /**\n     * Calcola il \"momentum\" della partita basato sugli ultimi eventi.\n     * \n     * @param ultimiPuntiCasa Ultimi punti segnati dalla squadra di casa\n     * @param ultimiPuntiOspite Ultimi punti segnati dalla squadra ospite",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 93,
        "end_line": 98,
        "class": ""
    },
    {
        "id": 40,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n* @return Descrizione del momentum della partita\n     */\n    public static String calcolaMomentum(int[] ultimiPuntiCasa, int[] ultimiPuntiOspite) {\n        int sommaCasa = Arrays.stream(ultimiPuntiCasa).sum();",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 98,
        "end_line": 102,
        "class": ""
    },
    {
        "id": 41,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nint sommaCasa = Arrays.stream(ultimiPuntiCasa).sum();\n        int sommaOspite = Arrays.stream(ultimiPuntiOspite).sum();\n        \n        if (sommaCasa > sommaOspite + 10) {\n            return \"Momentum fortemente a favore della squadra di casa!\";",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 102,
        "end_line": 107,
        "class": ""
    },
    {
        "id": 42,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\n} else if (sommaOspite > sommaCasa + 10) {\n            return \"Momentum fortemente a favore della squadra ospite!\";\n        } else if (Math.abs(sommaCasa - sommaOspite) <= 5) {\n            return \"Partita in equilibrio, momentum neutro\";",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 107,
        "end_line": 111,
        "class": ""
    },
    {
        "id": 43,
        "text": "// File: my_project/classi_java_custom\\BasketballStats.java\nreturn \"Partita in equilibrio, momentum neutro\";\n        } else {\n            return \"Leggero momentum a favore della squadra \" + \n                   (sommaCasa > sommaOspite ? \"di casa\" : \"ospite\");\n        }\n    }\n}",
        "source": "my_project/classi_java_custom\\BasketballStats.java",
        "type": "code",
        "start_line": 111,
        "end_line": 111,
        "class": ""
    },
    {
        "id": 44,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nClasse: CifratoreAziendale\npackage classi_java_custom;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\npublic class CifratoreAziendale {",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": "CifratoreAziendale\n"
    },
    {
        "id": 45,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nClasse: CifratoreAziendale\npublic class CifratoreAziendale {\n    \n    public static String cifraturaVortex(String testo, String chiaveSegreta) {\n        if (chiaveSegreta.length() != 12) {\n            throw new IllegalArgumentException(\"La chiave deve essere di 12 caratteri.\");",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 8,
        "end_line": 15,
        "class": "CifratoreAziendale\n"
    },
    {
        "id": 46,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\n}\n        \n        byte[] testoBytes = testo.getBytes(StandardCharsets.UTF_8);\n        byte[] chiaveBytes = chiaveSegreta.getBytes(StandardCharsets.UTF_8);\n        byte[] risultato = new byte[testoBytes.length];",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 15,
        "end_line": 19,
        "class": ""
    },
    {
        "id": 47,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nbyte[] risultato = new byte[testoBytes.length];\n        \n        for (int i = 0; i < testoBytes.length; i++) {\n            risultato[i] = (byte) (testoBytes[i] ^ chiaveBytes[i % chiaveBytes.length]);\n        }",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 19,
        "end_line": 26,
        "class": ""
    },
    {
        "id": 48,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\n}\n        \n        return bytesToHex(risultato);\n    }\n    public static String decifraturaVortex(String testoCifrato, String chiaveSegreta) {\n        if (chiaveSegreta.length() != 12) {",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 26,
        "end_line": 28,
        "class": ""
    },
    {
        "id": 49,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nif (chiaveSegreta.length() != 12) {\n            throw new IllegalArgumentException(\"La chiave deve essere di 12 caratteri.\");\n        }\n        \n        byte[] testoBytes = hexToBytes(testoCifrato);",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 28,
        "end_line": 33,
        "class": ""
    },
    {
        "id": 50,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nbyte[] testoBytes = hexToBytes(testoCifrato);\n        byte[] chiaveBytes = chiaveSegreta.getBytes(StandardCharsets.UTF_8);\n        byte[] risultato = new byte[testoBytes.length];",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 33,
        "end_line": 36,
        "class": ""
    },
    {
        "id": 51,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nbyte[] risultato = new byte[testoBytes.length];\n        \n        for (int i = 0; i < testoBytes.length; i++) {\n            risultato[i] = (byte) (testoBytes[i] ^ chiaveBytes[i % chiaveBytes.length]);\n        }",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 36,
        "end_line": 44,
        "class": ""
    },
    {
        "id": 52,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\n}\n        \n        return new String(risultato, StandardCharsets.UTF_8);\n    }\n    \n    private static String bytesToHex(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 44,
        "end_line": 52,
        "class": ""
    },
    {
        "id": 53,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nfor (byte b : bytes) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n    \n    private static byte[] hexToBytes(String hex) {\n        int len = hex.length();\n        byte[] data = new byte[len / 2];",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 52,
        "end_line": 58,
        "class": ""
    },
    {
        "id": 54,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\nbyte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)\n                    + Character.digit(hex.charAt(i + 1), 16));\n        }\n        return data;",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 58,
        "end_line": 61,
        "class": ""
    },
    {
        "id": 55,
        "text": "// File: my_project/classi_java_custom\\CifratoreAziendale.java\n}\n        return data;\n    }",
        "source": "my_project/classi_java_custom\\CifratoreAziendale.java",
        "type": "code",
        "start_line": 61,
        "end_line": 61,
        "class": ""
    },
    {
        "id": 56,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\npackage classi_java_custom;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeParseException;\nimport java.util.Calendar;\nimport java.util.Date;",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": ""
    },
    {
        "id": 57,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nClasse: DateUtilCustom\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\npublic class DateUtilCustom {\n    /**\n     * Formatta una data nel formato \"dd/MM/yyyy\".\n     *\n     * @param date La data da formattare.",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 8,
        "end_line": 17,
        "class": "DateUtilCustom\n"
    },
    {
        "id": 58,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*\n     * @param date La data da formattare.\n     * @return La data formattata come stringa.\n     */\n    public static String formatDate(Date date) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n        return sdf.format(date);",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 17,
        "end_line": 27,
        "class": ""
    },
    {
        "id": 59,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nreturn sdf.format(date);\n    }\n    /**\n     * Formatta una data nel formato specificato.\n     *\n     * @param date   La data da formattare.\n     * @param format Il formato desiderato (es. \"yyyy-MM-dd\").",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 27,
        "end_line": 31,
        "class": ""
    },
    {
        "id": 60,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @param format Il formato desiderato (es. \"yyyy-MM-dd\").\n     * @return La data formattata come stringa.\n     */\n    public static String formatDate(Date date, String format) {\n        SimpleDateFormat sdf = new SimpleDateFormat(format);",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 31,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 61,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nSimpleDateFormat sdf = new SimpleDateFormat(format);\n        return sdf.format(date);\n    }\n    /**\n     * Converte una stringa in un oggetto Date.\n     *\n     * @param dateString La stringa da convertire (es. \"31/12/2023\").",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 39,
        "end_line": 44,
        "class": ""
    },
    {
        "id": 62,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @param format     Il formato della stringa (es. \"dd/MM/yyyy\").\n     * @return L'oggetto Date corrispondente.\n     * @throws ParseException Se la stringa non è nel formato corretto.\n     */",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 44,
        "end_line": 50,
        "class": ""
    },
    {
        "id": 63,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*/\n    public static Date parseDate(String dateString, String format) throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\n        return sdf.parse(dateString);\n    }\n    /**",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 50,
        "end_line": 56,
        "class": ""
    },
    {
        "id": 64,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nreturn sdf.parse(dateString);\n    }\n    /**\n     * Calcola la differenza in giorni tra due date.\n     *\n     * @param startDate La data di inizio.\n     * @param endDate   La data di fine.\n     * @return La differenza in giorni.\n     */",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 56,
        "end_line": 62,
        "class": ""
    },
    {
        "id": 65,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @return La differenza in giorni.\n     */\n    public static long getDifferenceInDays(Date startDate, Date endDate) {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 62,
        "end_line": 68,
        "class": ""
    },
    {
        "id": 66,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nreturn TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n    }\n    /**\n     * Calcola la differenza in ore tra due date.\n     *\n     * @param startDate La data di inizio.\n     * @param endDate   La data di fine.",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 68,
        "end_line": 73,
        "class": ""
    },
    {
        "id": 67,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @param endDate   La data di fine.\n     * @return La differenza in ore.\n     */\n    public static long getDifferenceInHours(Date startDate, Date endDate) {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 73,
        "end_line": 80,
        "class": ""
    },
    {
        "id": 68,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nreturn TimeUnit.HOURS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n    }\n    /**\n     * Aggiunge un numero specificato di giorni a una data.\n     *\n     * @param date  La data di partenza.\n     * @param days  Il numero di giorni da aggiungere.",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 80,
        "end_line": 88,
        "class": ""
    },
    {
        "id": 69,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @param days  Il numero di giorni da aggiungere.\n     * @return La nuova data.\n     */\n    public static Date addDays(Date date, int days) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 88,
        "end_line": 94,
        "class": ""
    },
    {
        "id": 70,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\ncalendar.setTime(date);\n        calendar.add(Calendar.DAY_OF_YEAR, days);\n        return calendar.getTime();\n    }\n    /**\n     * Verifica se una data è nel passato rispetto alla data corrente.\n     *\n     * @param date La data da verificare.",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 94,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 71,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*\n     * @param date La data da verificare.\n     * @return True se la data è nel passato, altrimenti False.\n     */\n    public static boolean isPastDate(Date date) {\n        Date currentDate = new Date();\n        return date.before(currentDate);\n    }",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 103,
        "end_line": 110,
        "class": ""
    },
    {
        "id": 72,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nreturn date.before(currentDate);\n    }\n    \n    /**\n     * Calcola i giorni che mancano al compleanno di una persona.\n     * @param dataNascita\n     * @param nome\n     * @return messaggio giorni che mancano al tuo compleanno\n     */",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 110,
        "end_line": 115,
        "class": ""
    },
    {
        "id": 73,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*/\n    public static String giorniAlmiocompleannoSpecial(Date dataNascita, String nome) {\n        return \"Caro\" + nome + \" mancano \" + getDifferenceInDays(dataNascita, getCurrentDate()) + \" giorni al tuo compleanno\";\n    }\n    /**",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 115,
        "end_line": 126,
        "class": ""
    },
    {
        "id": 74,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n}\n    /**\n     * Verifica se una data è nel futuro rispetto alla data corrente.\n     *\n     * @param date La data da verificare.\n     * @return True se la data è nel futuro, altrimenti False.\n     */\n    public static boolean isFutureDate(Date date) {",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 126,
        "end_line": 134,
        "class": ""
    },
    {
        "id": 75,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*/\n    public static boolean isFutureDate(Date date) {\n        Date currentDate = new Date();\n        return date.after(currentDate);\n    }\n    /**\n     * Restituisce la data corrente.\n     *\n     * @return La data corrente.\n     */",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 134,
        "end_line": 138,
        "class": ""
    },
    {
        "id": 76,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n*\n     * @return La data corrente.\n     */\n    public static Date getCurrentDate() {\n        return new Date();\n    }\n    /**\n     * Ottieni un messaggio magico in base al giorno della settimana di una data.\n     * @param datamagica",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 138,
        "end_line": 141,
        "class": ""
    },
    {
        "id": 77,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\n* @param datamagica\n     * @return Il messaggio magico.\n     * @throws DateTimeParseException Se la data non è valida.\n     */\n    public static String getMessaggioMagico(LocalDate datamagica) throws DateTimeParseException {",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 141,
        "end_line": 144,
        "class": ""
    },
    {
        "id": 78,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\nDayOfWeek giornoSettimana = datamagica.getDayOfWeek();\n        switch(giornoSettimana) {\n            case MONDAY: return \"La magia inizia nel silenzio...\";\n            case TUESDAY: return \"I sussurri degli antichi si fanno sentire.\";",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 144,
        "end_line": 148,
        "class": ""
    },
    {
        "id": 79,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\ncase WEDNESDAY: return \"Il velo tra i mondi è sottile oggi.\";\n            case THURSDAY: return \"L'energia magica è potente e chiara.\";\n            case FRIDAY: return \"Attenzione agli incantesimi del crepuscolo.\";",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 148,
        "end_line": 148,
        "class": ""
    },
    {
        "id": 80,
        "text": "// File: my_project/classi_java_custom\\DateUtilCustom.java\ncase SATURDAY: return \"Il giorno perfetto per scoprire segreti nascosti.\";\n            case SUNDAY: return \"Riposa e rigenera il tuo potere magico.\";\n            default: return \"Il giorno è avvolto nel mistero...\";\n        }\n    }\n}",
        "source": "my_project/classi_java_custom\\DateUtilCustom.java",
        "type": "code",
        "start_line": 148,
        "end_line": 148,
        "class": ""
    },
    {
        "id": 81,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nClasse: ElaboratoreLinguaggio\npackage classi_java_custom;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ElaboratoreLinguaggio {\n    /**\n     * Analizza il sentiment secondo il modello aziendale",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 1,
        "end_line": 12,
        "class": "ElaboratoreLinguaggio\n"
    },
    {
        "id": 82,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n* Analizza il sentiment secondo il modello aziendale\n     * @param testo Testo da analizzare\n     * @return Punteggio sentiment [-1.0, 1.0]\n     */\n    public static double analizzaSentimento(String testo) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 12,
        "end_line": 17,
        "class": ""
    },
    {
        "id": 83,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\npublic static double analizzaSentimento(String testo) {\n        // Esempio di analisi del sentimento utilizzando un modello NLP personalizzato (simulato)\n        String[] paroleChiavePositive = {\"felice\", \"contento\", \"successo\", \"ottimo\"};",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 17,
        "end_line": 21,
        "class": ""
    },
    {
        "id": 84,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nString[] paroleChiaveNegative = {\"triste\", \"arrabbiato\", \"fallimento\", \"pessimo\"};\n        int punteggioPositivo = 0;\n        int punteggioNegativo = 0;\n        for (String parola : paroleChiavePositive) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 21,
        "end_line": 26,
        "class": ""
    },
    {
        "id": 85,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nfor (String parola : paroleChiavePositive) {\n            if (testo.toLowerCase().contains(parola)) {\n                punteggioPositivo++;\n            }\n        }\n        for (String parola : paroleChiaveNegative) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 26,
        "end_line": 36,
        "class": ""
    },
    {
        "id": 86,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n}\n        for (String parola : paroleChiaveNegative) {\n            if (testo.toLowerCase().contains(parola)) {\n                punteggioNegativo++;\n            }\n        }",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 36,
        "end_line": 37,
        "class": ""
    },
    {
        "id": 87,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\npunteggioNegativo++;\n            }\n        }\n        double punteggioSentimento = (punteggioPositivo - punteggioNegativo) / (double) (punteggioPositivo + punteggioNegativo + 1);",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 37,
        "end_line": 45,
        "class": ""
    },
    {
        "id": 88,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nreturn Math.max(-1.0, Math.min(1.0, punteggioSentimento));\n    }\n    /**\n     * Genera riassunto tecnico con estrazione di concetti chiave\n     * @param documento Testo completo\n     * @return Riassunto strutturato\n     */",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 45,
        "end_line": 47,
        "class": ""
    },
    {
        "id": 89,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n* @return Riassunto strutturato\n     */\n    public static String generaRiassuntoTecnico(String documento) {\n        // Esempio di generazione di un riassunto tecnico (simulato)",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 47,
        "end_line": 51,
        "class": ""
    },
    {
        "id": 90,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nString[] concettiChiave = {\"tecnologia\", \"innovazione\", \"sviluppo\", \"progetto\", \"risultati\"};\n        StringBuilder riassunto = new StringBuilder();\n        for (String concetto : concettiChiave) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 51,
        "end_line": 56,
        "class": ""
    },
    {
        "id": 91,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nfor (String concetto : concettiChiave) {\n            if (documento.toLowerCase().contains(concetto)) {\n                riassunto.append(\"Concetto chiave: \").append(concetto).append(\"\\n\");\n            }\n        }",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 56,
        "end_line": 63,
        "class": ""
    },
    {
        "id": 92,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n}\n        }\n        riassunto.append(\"Riassunto tecnico: \").append(documento.substring(0, Math.min(documento.length(), 100))).append(\"...\");\n        return riassunto.toString();\n    }\n    /**\n     * Estrae entità nominate dal testo",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 63,
        "end_line": 68,
        "class": ""
    },
    {
        "id": 93,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n}\n    /**\n     * Estrae entità nominate dal testo\n     * @param testo Testo da analizzare\n     * @return Lista di entità nominate\n     */\n    public static List<String> estraiEntitaNominate(String testo) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 68,
        "end_line": 72,
        "class": ""
    },
    {
        "id": 94,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n// Esempio di estrazione di entità nominate (simulato)\n        List<String> entitaNominate = new ArrayList<>();\n        String[] paroleChiaveEntita = {\"nome\", \"cognome\", \"azienda\", \"prodotto\"};\n        for (String parola : paroleChiaveEntita) {",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 72,
        "end_line": 83,
        "class": ""
    },
    {
        "id": 95,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nfor (String parola : paroleChiaveEntita) {\n            if (testo.toLowerCase().contains(parola)) {\n                entitaNominate.add(parola);\n            }\n        }\n        return entitaNominate;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 83,
        "end_line": 87,
        "class": ""
    },
    {
        "id": 96,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n}\n        return entitaNominate;\n    }\n    /**\n     * Traduce il testo in un'altra lingua\n     * @param testo Testo da tradurre\n     * @param linguaDestinazione Lingua di destinazione (es. \"it\", \"en\")\n     * @return Testo tradotto\n     */",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 87,
        "end_line": 95,
        "class": ""
    },
    {
        "id": 97,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n* @return Testo tradotto\n     */\n    public static String traduciTesto(String testo, String linguaDestinazione) {\n        // Esempio di traduzione del testo (simulato)\n        Map<String, String> dizionario = new HashMap<>();",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 95,
        "end_line": 98,
        "class": ""
    },
    {
        "id": 98,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nMap<String, String> dizionario = new HashMap<>();\n        dizionario.put(\"ciao\", \"hello\");\n        dizionario.put(\"mondo\", \"world\");\n        String[] parole = testo.split(\" \");\n        StringBuilder testoTradotto = new StringBuilder();",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 98,
        "end_line": 105,
        "class": ""
    },
    {
        "id": 99,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\nStringBuilder testoTradotto = new StringBuilder();\n        for (String parola : parole) {\n            if (dizionario.containsKey(parola.toLowerCase())) {\n                testoTradotto.append(dizionario.get(parola.toLowerCase())).append(\" \");",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 105,
        "end_line": 105,
        "class": ""
    },
    {
        "id": 100,
        "text": "// File: my_project/classi_java_custom\\ElaboratoreLinguaggio.java\n} else {\n                testoTradotto.append(parola).append(\" \");\n            }\n        }\n        return testoTradotto.toString().trim();\n    }",
        "source": "my_project/classi_java_custom\\ElaboratoreLinguaggio.java",
        "type": "code",
        "start_line": 105,
        "end_line": 105,
        "class": ""
    },
    {
        "id": 101,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\npackage classi_java_custom;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.BadPaddingException;",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 1,
        "end_line": 9,
        "class": ""
    },
    {
        "id": 102,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 9,
        "end_line": 16,
        "class": ""
    },
    {
        "id": 103,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nClasse: GestoreConfigurazioni\nimport java.security.InvalidKeyException;\npublic class GestoreConfigurazioni {\n    private static final String ALGORITMO = \"AES\";\n    private static final String CHIAVE_MASTER = \"chiaveSegretaMaster\"; // Sostituisci con la chiave reale\n    /**",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 16,
        "end_line": 22,
        "class": "GestoreConfigurazioni\n"
    },
    {
        "id": 104,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n/**\n     * Carica configurazioni criptate dal vault aziendale\n     * @param ambiente Dev/Test/Prod\n     * @param chiaveMaster Chiave di decrittazione\n     * @return Mappa di configurazioni\n     */",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 22,
        "end_line": 26,
        "class": ""
    },
    {
        "id": 105,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n* @return Mappa di configurazioni\n     */\n    public static Map<String, String> caricaConfigurazioni(String ambiente, String chiaveMaster) {\n        Map<String, String> configurazioni = new HashMap<>();\n        try {",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 26,
        "end_line": 30,
        "class": ""
    },
    {
        "id": 106,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\ntry {\n            // Esempio di configurazioni criptate (simulato)\n            String configCriptate = \"configCriptateBase64\"; // Sostituisci con configurazioni reali\n            // Decodifica la chiave master",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 30,
        "end_line": 34,
        "class": ""
    },
    {
        "id": 107,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n// Decodifica la chiave master\n            byte[] chiaveMasterDecodificata = Base64.getDecoder().decode(chiaveMaster);",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 34,
        "end_line": 36,
        "class": ""
    },
    {
        "id": 108,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nSecretKey chiaveSegreta = new SecretKeySpec(chiaveMasterDecodificata, 0, chiaveMasterDecodificata.length, ALGORITMO);\n            // Decifra le configurazioni\n            Cipher cipher = Cipher.getInstance(ALGORITMO);",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 36,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 109,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nCipher cipher = Cipher.getInstance(ALGORITMO);\n            cipher.init(Cipher.DECRYPT_MODE, chiaveSegreta);\n            byte[] configDecifrate = cipher.doFinal(Base64.getDecoder().decode(configCriptate));",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 39,
        "end_line": 43,
        "class": ""
    },
    {
        "id": 110,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n// Converte le configurazioni decifrate in una mappa\n            String configDecifrateString = new String(configDecifrate);\n            // Supponiamo che le configurazioni siano in formato JSON e le convertiamo in una mappa",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 43,
        "end_line": 45,
        "class": ""
    },
    {
        "id": 111,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n// Qui dovresti usare una libreria JSON per convertire la stringa JSON in una mappa\n            // Esempio: configurazioni = new ObjectMapper().readValue(configDecifrateString, Map.class);\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 45,
        "end_line": 54,
        "class": ""
    },
    {
        "id": 112,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n} catch (Exception e) {\n            throw new RuntimeException(\"Errore durante il caricamento delle configurazioni\", e);\n        }\n        return configurazioni;\n    }\n    /**\n     * Genera configurazioni runtime per microservizi",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 54,
        "end_line": 59,
        "class": ""
    },
    {
        "id": 113,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n/**\n     * Genera configurazioni runtime per microservizi\n     * @param template Template base\n     * @param parametri Parametri dinamici\n     * @return Configurazione pronta per il deployment\n     */",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 59,
        "end_line": 61,
        "class": ""
    },
    {
        "id": 114,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n* @return Configurazione pronta per il deployment\n     */\n    public static String generaConfigurazioneDinamica(String template, Map<String, Object> parametri) {\n        // Sostituisce i placeholder nel template con i valori dei parametri",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 61,
        "end_line": 69,
        "class": ""
    },
    {
        "id": 115,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nfor (Map.Entry<String, Object> entry : parametri.entrySet()) {\n            String placeholder = \"{{\" + entry.getKey() + \"}}\";\n            String value = entry.getValue().toString();\n            template = template.replace(placeholder, value);",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 69,
        "end_line": 74,
        "class": ""
    },
    {
        "id": 116,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\ntemplate = template.replace(placeholder, value);\n        }\n        return template;\n    }\n    /**\n     * Valida le configurazioni caricate\n     * @param configurazioni Mappa di configurazioni",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 74,
        "end_line": 77,
        "class": ""
    },
    {
        "id": 117,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n* @param configurazioni Mappa di configurazioni\n     * @return True se le configurazioni sono valide, altrimenti False\n     */\n    public static boolean validaConfigurazioni(Map<String, String> configurazioni) {",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 77,
        "end_line": 86,
        "class": ""
    },
    {
        "id": 118,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n// Esempio di validazione: controlla la presenza di configurazioni obbligatorie\n        String[] configObbligatorie = {\"dbUrl\", \"dbUser\", \"dbPassword\"};\n        for (String config : configObbligatorie) {",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 86,
        "end_line": 91,
        "class": ""
    },
    {
        "id": 119,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nfor (String config : configObbligatorie) {\n            if (!configurazioni.containsKey(config)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Aggiorna le configurazioni esistenti",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 91,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 120,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n}\n    /**\n     * Aggiorna le configurazioni esistenti\n     * @param configurazioniEsistenti Configurazioni attuali\n     * @param nuoveConfigurazioni Nuove configurazioni da applicare\n     * @return Configurazioni aggiornate\n     */",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 92,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 121,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\n* @return Configurazioni aggiornate\n     */\n    public static Map<String, String> aggiornaConfigurazioni(Map<String, String> configurazioniEsistenti, Map<String, String> nuoveConfigurazioni) {",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 97,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 122,
        "text": "// File: my_project/classi_java_custom\\GestoreConfigurazioni.java\nMap<String, String> configurazioniAggiornate = new HashMap<>(configurazioniEsistenti);\n        configurazioniAggiornate.putAll(nuoveConfigurazioni);\n        return configurazioniAggiornate;\n    }",
        "source": "my_project/classi_java_custom\\GestoreConfigurazioni.java",
        "type": "code",
        "start_line": 97,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 123,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nClasse: GestoreConoscenza\npackage classi_java_custom;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\npublic class GestoreConoscenza {\n    /**",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 1,
        "end_line": 11,
        "class": "GestoreConoscenza\n"
    },
    {
        "id": 124,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nClasse: GestoreConoscenza\npublic class GestoreConoscenza {\n    /**\n     * Indicizza documenti tecnici nel formato interno\n     * @param documento Contenuto da indicizzare\n     * @return Metadati arricchiti\n     */",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 11,
        "end_line": 16,
        "class": "GestoreConoscenza\n"
    },
    {
        "id": 125,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n* @return Metadati arricchiti\n     */\n    public static Map<String, Object> indicizzaDocumento(String documento) {\n        Map<String, Object> metadati = new HashMap<>();\n        // Esempio di arricchimento dei metadati",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 16,
        "end_line": 21,
        "class": ""
    },
    {
        "id": 126,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n// Esempio di arricchimento dei metadati\n        metadati.put(\"titolo\", estraiTitolo(documento));\n        metadati.put(\"autore\", estraiAutore(documento));\n        metadati.put(\"data\", estraiData(documento));",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 21,
        "end_line": 29,
        "class": ""
    },
    {
        "id": 127,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nmetadati.put(\"data\", estraiData(documento));\n        metadati.put(\"paroleChiave\", estraiParoleChiave(documento));\n        return metadati;\n    }\n    /**\n     * Cerca nella knowledge base con query semantica\n     * @param query Domanda naturale",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 29,
        "end_line": 34,
        "class": ""
    },
    {
        "id": 128,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n* @param query Domanda naturale\n     * @return Risultati contestualizzati\n     */\n    public static List<String> ricercaSemantica(String query) {\n        List<String> risultati = new ArrayList<>();\n        // Esempio di ricerca semantica (simulato)",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 34,
        "end_line": 40,
        "class": ""
    },
    {
        "id": 129,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n// Esempio di ricerca semantica (simulato)\n        if (query.toLowerCase().contains(\"algoritmo\")) {\n            risultati.add(\"Documento sugli algoritmi di ordinamento\");\n        }\n        if (query.toLowerCase().contains(\"machine learning\")) {",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 40,
        "end_line": 45,
        "class": ""
    },
    {
        "id": 130,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nif (query.toLowerCase().contains(\"machine learning\")) {\n            risultati.add(\"Documento sui modelli di machine learning\");\n        }\n        if (query.toLowerCase().contains(\"sicurezza\")) {",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 45,
        "end_line": 55,
        "class": ""
    },
    {
        "id": 131,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nif (query.toLowerCase().contains(\"sicurezza\")) {\n            risultati.add(\"Documento sulle best practice di sicurezza informatica\");\n        }\n        return risultati;\n    }\n    /**\n     * Estrae entità nominate dal documento",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 55,
        "end_line": 59,
        "class": ""
    },
    {
        "id": 132,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n}\n    /**\n     * Estrae entità nominate dal documento\n     * @param documento Contenuto da analizzare\n     * @return Lista di entità nominate\n     */\n    public static List<String> estraiEntitaNominate(String documento) {",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 59,
        "end_line": 66,
        "class": ""
    },
    {
        "id": 133,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nList<String> entita = new ArrayList<>();\n        // Esempio di estrazione di entità nominate (simulato)\n        if (documento.contains(\"algoritmo\")) {\n            entita.add(\"algoritmo\");\n        }",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 66,
        "end_line": 75,
        "class": ""
    },
    {
        "id": 134,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nentita.add(\"algoritmo\");\n        }\n        if (documento.contains(\"machine learning\")) {\n            entita.add(\"machine learning\");\n        }\n        if (documento.contains(\"sicurezza\")) {\n            entita.add(\"sicurezza\");\n        }",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 75,
        "end_line": 80,
        "class": ""
    },
    {
        "id": 135,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nentita.add(\"sicurezza\");\n        }\n        return entita;\n    }\n    /**\n     * Genera un riassunto contestualizzato del documento\n     * @param documento Contenuto da riassumere\n     * @return Riassunto contestualizzato\n     */",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 80,
        "end_line": 87,
        "class": ""
    },
    {
        "id": 136,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n* @return Riassunto contestualizzato\n     */\n    public static String generaRiassunto(String documento) {\n        // Esempio di generazione di un riassunto (simulato)\n        return documento.substring(0, Math.min(documento.length(), 100)) + \"...\";",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 87,
        "end_line": 96,
        "class": ""
    },
    {
        "id": 137,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n}\n    // Metodi ausiliari per l'estrazione di metadati (simulati)\n    private static String estraiTitolo(String documento) {\n        return \"Titolo del documento\";\n    }\n    private static String estraiAutore(String documento) {",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 96,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 138,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\n}\n    private static String estraiAutore(String documento) {\n        return \"Autore del documento\";\n    }\n    private static String estraiData(String documento) {\n        return \"2023-10-01\";\n    }",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 99,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 139,
        "text": "// File: my_project/classi_java_custom\\GestoreConoscenza.java\nreturn \"2023-10-01\";\n    }\n    private static List<String> estraiParoleChiave(String documento) {\n        return List.of(\"parolaChiave1\", \"parolaChiave2\", \"parolaChiave3\");\n    }",
        "source": "my_project/classi_java_custom\\GestoreConoscenza.java",
        "type": "code",
        "start_line": 99,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 140,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\npackage classi_java_custom;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.security.Keys;\nimport javax.crypto.SecretKey;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": ""
    },
    {
        "id": 141,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\nClasse: GestoreIdentita\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\npublic class GestoreIdentita {\n    private static final SecretKey CHIAVE_FIRMA = Keys.secretKeyFor(SignatureAlgorithm.HS256);\n    /**",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 8,
        "end_line": 17,
        "class": "GestoreIdentita\n"
    },
    {
        "id": 142,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n/**\n     * Genera un'identità digitale secondo lo standard ZeroTrust\n     * @param parametriBiometrici Dati biometrici codificati\n     * @return Token JWT firmato digitalmente\n     */",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 17,
        "end_line": 21,
        "class": ""
    },
    {
        "id": 143,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n* @return Token JWT firmato digitalmente\n     */\n    public static String generaIdentitaDigitale(byte[] parametriBiometrici) {\n        try {\n            // Calcola l'hash SHA-256 dei dati biometrici",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 21,
        "end_line": 25,
        "class": ""
    },
    {
        "id": 144,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n// Calcola l'hash SHA-256 dei dati biometrici\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digest.digest(parametriBiometrici);\n            // Codifica l'hash in Base64",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 25,
        "end_line": 31,
        "class": ""
    },
    {
        "id": 145,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n// Codifica l'hash in Base64\n            String hashBase64 = Base64.getEncoder().encodeToString(hash);\n            // Genera il token JWT\n            String token = Jwts.builder()\n                    .setSubject(hashBase64)",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 31,
        "end_line": 38,
        "class": ""
    },
    {
        "id": 146,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n.setSubject(hashBase64)\n                    .signWith(CHIAVE_FIRMA)\n                    .compact();\n            return token;\n        } catch (NoSuchAlgorithmException e) {",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 38,
        "end_line": 43,
        "class": ""
    },
    {
        "id": 147,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n} catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Errore durante la generazione dell'identità digitale\", e);\n        }\n    }\n    /**\n     * Verifica l'identità contro il registro decentralizzato",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 43,
        "end_line": 48,
        "class": ""
    },
    {
        "id": 148,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n* Verifica l'identità contro il registro decentralizzato\n     * @param token Token JWT\n     * @param improntaHash Hash atteso\n     * @return Esito verifica con livello di confidenza\n     */",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 48,
        "end_line": 54,
        "class": ""
    },
    {
        "id": 149,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n* @return Esito verifica con livello di confidenza\n     */\n    public static boolean verificaIdentita(String token, String improntaHash) {\n        try {\n            // Decodifica il token JWT\n            String hashBase64 = Jwts.parserBuilder()",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 54,
        "end_line": 60,
        "class": ""
    },
    {
        "id": 150,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\nString hashBase64 = Jwts.parserBuilder()\n                    .setSigningKey(CHIAVE_FIRMA)\n                    .build()\n                    .parseClaimsJws(token)\n                    .getBody()\n                    .getSubject();",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 60,
        "end_line": 68,
        "class": ""
    },
    {
        "id": 151,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n.getSubject();\n            // Confronta l'hash decodificato con l'hash atteso\n            return hashBase64.equals(improntaHash);\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 68,
        "end_line": 71,
        "class": ""
    },
    {
        "id": 152,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n} catch (Exception e) {\n            throw new RuntimeException(\"Errore durante la verifica dell'identità\", e);\n        }\n    }\n    /**\n     * Aggiorna i dati biometrici associati all'identità\n     * @param token Token JWT esistente",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 71,
        "end_line": 77,
        "class": ""
    },
    {
        "id": 153,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n* @param token Token JWT esistente\n     * @param nuoviParametriBiometrici Nuovi dati biometrici codificati\n     * @return Nuovo token JWT aggiornato\n     */\n    public static String aggiornaIdentita(String token, byte[] nuoviParametriBiometrici) {",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 77,
        "end_line": 84,
        "class": ""
    },
    {
        "id": 154,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n// Genera un nuovo token con i nuovi dati biometrici\n        return generaIdentitaDigitale(nuoviParametriBiometrici);\n    }\n    /**\n     * Ottieni informazioni dettagliate sull'identità\n     * @param token Token JWT",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 84,
        "end_line": 91,
        "class": ""
    },
    {
        "id": 155,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n* @param token Token JWT\n     * @return Informazioni dettagliate sull'identità\n     */\n    public static String ottieniDettagliIdentita(String token) {\n        try {\n            // Decodifica il token JWT",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 91,
        "end_line": 94,
        "class": ""
    },
    {
        "id": 156,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\ntry {\n            // Decodifica il token JWT\n            String hashBase64 = Jwts.parserBuilder()\n                    .setSigningKey(CHIAVE_FIRMA)\n                    .build()\n                    .parseClaimsJws(token)",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 94,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 157,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n.parseClaimsJws(token)\n                    .getBody()\n                    .getSubject();\n            // Restituisce l'hash dei dati biometrici\n            return \"Dettagli identità: \" + hashBase64;\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 97,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 158,
        "text": "// File: my_project/classi_java_custom\\GestoreIdentita.java\n} catch (Exception e) {\n            throw new RuntimeException(\"Errore durante il recupero dei dettagli dell'identità\", e);\n        }\n    }",
        "source": "my_project/classi_java_custom\\GestoreIdentita.java",
        "type": "code",
        "start_line": 97,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 159,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\npackage classi_java_custom;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Base64;",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": ""
    },
    {
        "id": 160,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\nClasse: GestoreLicenze\nimport java.util.Base64;\npublic class GestoreLicenze {\n    /**\n     * Genera una chiave di attivazione secondo il nuovo formato 2024\n     * @param codiceCliente Codice a 8 cifre\n     * @param dataScadenza Formato AAAAMMGG",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 8,
        "end_line": 16,
        "class": "GestoreLicenze\n"
    },
    {
        "id": 161,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n* @param dataScadenza Formato AAAAMMGG\n     * @return Chiave di attivazione criptata\n     */\n    public static String generaChiaveAttivazione(String codiceCliente, String dataScadenza) {\n        try {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 16,
        "end_line": 20,
        "class": ""
    },
    {
        "id": 162,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\ntry {\n            // Verifica che il codice cliente sia di 8 cifre\n            if (codiceCliente.length() != 8) {\n                throw new IllegalArgumentException(\"Il codice cliente deve essere di 8 cifre.\");\n            }",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 20,
        "end_line": 25,
        "class": ""
    },
    {
        "id": 163,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n}\n            // Verifica che la data di scadenza sia nel formato corretto\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\");\n            LocalDate scadenza = LocalDate.parse(dataScadenza, formatter);",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 25,
        "end_line": 29,
        "class": ""
    },
    {
        "id": 164,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Combinazione di codice cliente e data di scadenza\n            String combinazione = codiceCliente + dataScadenza;\n            // Generazione dell'hash SHA-256\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 29,
        "end_line": 34,
        "class": ""
    },
    {
        "id": 165,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\nbyte[] hash = digest.digest(combinazione.getBytes(StandardCharsets.UTF_8));\n            // Codifica in Base64\n            return Base64.getEncoder().encodeToString(hash);\n        } catch (NoSuchAlgorithmException e) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 34,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 166,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n} catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Errore durante la generazione della chiave di attivazione\", e);\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 39,
        "end_line": 41,
        "class": ""
    },
    {
        "id": 167,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n} catch (Exception e) {\n            throw new IllegalArgumentException(\"Formato della data di scadenza non valido\", e);\n        }\n    }\n    /**\n     * Verifica la validità di una licenza enterprise\n     * @param chiave Chiave da verificare",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 41,
        "end_line": 49,
        "class": ""
    },
    {
        "id": 168,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n* @param chiave Chiave da verificare\n     * @param improntaDigitale Impronta unica del sistema\n     * @return Stato della licenza con codici speciali\n     */\n    public static int verificaLicenza(String chiave, String improntaDigitale) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 49,
        "end_line": 54,
        "class": ""
    },
    {
        "id": 169,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Esempio di controllo: verifica che la chiave sia valida e corrisponda all'impronta digitale\n        try {\n            // Decodifica la chiave\n            byte[] decodedKey = Base64.getDecoder().decode(chiave);",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 54,
        "end_line": 58,
        "class": ""
    },
    {
        "id": 170,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Genera l'hash dell'impronta digitale\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hashImpronta = digest.digest(improntaDigitale.getBytes(StandardCharsets.UTF_8));",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 58,
        "end_line": 62,
        "class": ""
    },
    {
        "id": 171,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Confronta l'hash della chiave con l'hash dell'impronta digitale\n            if (MessageDigest.isEqual(decodedKey, hashImpronta)) {\n                return 1; // Licenza valida\n            } else {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 62,
        "end_line": 67,
        "class": ""
    },
    {
        "id": 172,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\nreturn 1; // Licenza valida\n            } else {\n                return 0; // Licenza non valida\n            }\n        } catch (NoSuchAlgorithmException e) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 67,
        "end_line": 73,
        "class": ""
    },
    {
        "id": 173,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n}\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Errore durante la verifica della licenza\", e);\n        }\n    }\n    /**\n     * Rinnova una licenza esistente\n     * @param chiave Chiave attuale",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 73,
        "end_line": 78,
        "class": ""
    },
    {
        "id": 174,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n* @param chiave Chiave attuale\n     * @param nuovaDataScadenza Nuova data di scadenza formato AAAAMMGG\n     * @return Nuova chiave di attivazione\n     */\n    public static String rinnovaLicenza(String chiave, String nuovaDataScadenza) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 78,
        "end_line": 83,
        "class": ""
    },
    {
        "id": 175,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Decodifica la chiave esistente\n        byte[] decodedKey = Base64.getDecoder().decode(chiave);\n        // Genera una nuova chiave con la nuova data di scadenza",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 83,
        "end_line": 88,
        "class": ""
    },
    {
        "id": 176,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n// Genera una nuova chiave con la nuova data di scadenza\n        return generaChiaveAttivazione(new String(decodedKey, StandardCharsets.UTF_8).substring(0, 8), nuovaDataScadenza);\n    }\n    /**\n     * Ottieni informazioni dettagliate su una licenza",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 88,
        "end_line": 93,
        "class": ""
    },
    {
        "id": 177,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\n/**\n     * Ottieni informazioni dettagliate su una licenza\n     * @param chiave Chiave da analizzare\n     * @return Informazioni dettagliate sulla licenza\n     */\n    public static String ottieniDettagliLicenza(String chiave) {",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 93,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 178,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\npublic static String ottieniDettagliLicenza(String chiave) {\n        // Decodifica la chiave\n        byte[] decodedKey = Base64.getDecoder().decode(chiave);\n        // Esempio di informazioni dettagliate (da implementare in base alle esigenze)",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 99,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 179,
        "text": "// File: my_project/classi_java_custom\\GestoreLicenze.java\nreturn \"Dettagli licenza per la chiave: \" + new String(decodedKey, StandardCharsets.UTF_8);\n    }",
        "source": "my_project/classi_java_custom\\GestoreLicenze.java",
        "type": "code",
        "start_line": 99,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 180,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\nClasse: GiorniMagici\npackage classi_java_custom;\nimport java.time.LocalDate;\npublic class GiorniMagici {\n    /**\n     * Verifica se una data è magica (giorno * mese = ultime due cifre dell'anno)\n     * @param giorno Il giorno della data.\n     * @param mese Il mese della data.",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 1,
        "end_line": 8,
        "class": "GiorniMagici\n"
    },
    {
        "id": 181,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n* @param mese Il mese della data.\n     * @param anno L'anno della data.\n     * @return true se la data è magica, false altrimenti.\n     */\n    public static boolean isDataMagica(int giorno, int mese, int anno) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 8,
        "end_line": 13,
        "class": ""
    },
    {
        "id": 182,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\nint ultimeDueCifreAnno = anno % 100;\n        return (giorno * mese) == ultimeDueCifreAnno;\n    }\n    \n    /**\n     * Genera un numero magico a partire da una data.\n     * @param giorno\n     * @param mese\n     * @param anno",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 13,
        "end_line": 22,
        "class": ""
    },
    {
        "id": 183,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n* @param giorno\n     * @param mese\n     * @param anno\n     * @return Il numero magico generato.\n     */\n    public static int generaNumeroMagico(int giorno, int mese, int anno) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 22,
        "end_line": 25,
        "class": ""
    },
    {
        "id": 184,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\nint somma = sommaCifre(giorno) + sommaCifre(mese) + sommaCifre(anno);\n        return somma * somma;\n    }\n    \n    \n    \n    /**\n     * Verifica se un numero è magico.\n     * @param numero Il numero da verificare.",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 25,
        "end_line": 36,
        "class": ""
    },
    {
        "id": 185,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n* @param numero Il numero da verificare.\n     * @return true se il numero è magico, false altrimenti.\n     */\n    public static boolean isNumeroMagico(int numero) {\n        return isPrime(numero) && isFibonacci(numero);\n    }\n    \n    /**",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 36,
        "end_line": 45,
        "class": ""
    },
    {
        "id": 186,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n}\n    \n    /**\n     * Somma le cifre di un numero.\n     * @param numero Il numero di cui sommare le cifre.\n     * @return La somma delle cifre.\n     */\n    private static int sommaCifre(int numero) {\n        int somma = 0;",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 45,
        "end_line": 52,
        "class": ""
    },
    {
        "id": 187,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\nint somma = 0;\n        numero = Math.abs(numero);\n        while (numero != 0) {\n            somma += numero % 10;\n            numero /= 10;\n        }\n        return somma;\n    }\n    \n    /**\n     * Verifica se un numero è primo.",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 52,
        "end_line": 62,
        "class": ""
    },
    {
        "id": 188,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n}\n    \n    /**\n     * Verifica se un numero è primo.\n     * @param numero Il numero da verificare.\n     * @return true se il numero è primo, false altrimenti.\n     */\n    private static boolean isPrime(int numero) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 62,
        "end_line": 66,
        "class": ""
    },
    {
        "id": 189,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n*/\n    private static boolean isPrime(int numero) {\n        if (numero <= 1) return false;\n        if (numero <= 3) return true;\n        if (numero % 2 == 0 || numero % 3 == 0) return false;\n        for (int i = 5; i * i <= numero; i += 6) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 66,
        "end_line": 75,
        "class": ""
    },
    {
        "id": 190,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\nfor (int i = 5; i * i <= numero; i += 6) {\n            if (numero % i == 0 || numero % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n    \n    /**\n     * Verifica se è un numero di Fibonacci.",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 75,
        "end_line": 80,
        "class": ""
    },
    {
        "id": 191,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n}\n    \n    /**\n     * Verifica se è un numero di Fibonacci.\n     * @param numero Il numero da verificare.\n     * @return true se il numero è di Fibonacci, false altrimenti.\n     */\n    private static boolean isFibonacci(int numero) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 80,
        "end_line": 87,
        "class": ""
    },
    {
        "id": 192,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n*/\n    private static boolean isFibonacci(int numero) {\n        int test1 = 5 * numero * numero + 4;\n        int test2 = 5 * numero * numero - 4;\n        return isPerfectSquare(test1) || isPerfectSquare(test2);\n    }\n    \n    /**",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 87,
        "end_line": 95,
        "class": ""
    },
    {
        "id": 193,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n}\n    \n    /**\n     * Verifica se è un quadrato perfetto.\n     * @param n Il numero da verificare.\n     * @return true se il numero è un quadrato perfetto, false altrimenti.\n     */\n    private static boolean isPerfectSquare(int n) {",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 95,
        "end_line": 102,
        "class": ""
    },
    {
        "id": 194,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n*/\n    private static boolean isPerfectSquare(int n) {\n        int sqrt = (int) Math.sqrt(n);\n        return sqrt * sqrt == n;\n    }\n        /**\n     * Restituisce un segnale Wow specifico in base al giorno indicato\n     * @param date",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 102,
        "end_line": 102,
        "class": ""
    },
    {
        "id": 195,
        "text": "// File: my_project/classi_java_custom\\GiorniMagici.java\n* @param date\n     * @return Il segnale Wow.\n     */\n    public static String segnaleWow (LocalDate date){\n        String wow = \"il tuo segnale Wow è :\" + DateUtilCustom.getMessaggioMagico(date) ;\n        return wow;\n    }\n}",
        "source": "my_project/classi_java_custom\\GiorniMagici.java",
        "type": "code",
        "start_line": 102,
        "end_line": 102,
        "class": ""
    },
    {
        "id": 196,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nClasse: IspezionatoreCodice\npackage classi_java_custom;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class IspezionatoreCodice {\n    /**",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 1,
        "end_line": 10,
        "class": "IspezionatoreCodice\n"
    },
    {
        "id": 197,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nClasse: IspezionatoreCodice\npublic class IspezionatoreCodice {\n    /**\n     * Calcola l'indice di manutenibilità (MI) secondo metriche interne\n     * @param codice Sorgente da analizzare\n     * @return Valore MI con soglie personalizzate\n     */",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 10,
        "end_line": 15,
        "class": "IspezionatoreCodice\n"
    },
    {
        "id": 198,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n* @return Valore MI con soglie personalizzate\n     */\n    public static double calcolaIndiceManutenibilita(String codice) {\n        // Esempio di metriche interne: lunghezza delle righe, numero di commenti, complessità ciclomatica",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 15,
        "end_line": 18,
        "class": ""
    },
    {
        "id": 199,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nint lunghezzaMediaRighe = calcolaLunghezzaMediaRighe(codice);\n        int numeroCommenti = contaCommenti(codice);\n        int complessitaCiclomatica = calcolaComplessitaCiclomatica(codice);\n        // Calcolo dell'indice di manutenibilità (MI)",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 18,
        "end_line": 22,
        "class": ""
    },
    {
        "id": 200,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n// Calcolo dell'indice di manutenibilità (MI)\n        double mi = 100.0 - (lunghezzaMediaRighe * 0.1) + (numeroCommenti * 0.5) - (complessitaCiclomatica * 0.2);\n        return Math.max(0, Math.min(100, mi));\n    }\n    /**",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 22,
        "end_line": 29,
        "class": ""
    },
    {
        "id": 201,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nreturn Math.max(0, Math.min(100, mi));\n    }\n    /**\n     * Rileva pattern di codice proibiti dal coding standard\n     * @param codice Blocco di codice da controllare\n     * @return Lista di violazioni con codici errore\n     */",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 29,
        "end_line": 35,
        "class": ""
    },
    {
        "id": 202,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n* @return Lista di violazioni con codici errore\n     */\n    public static List<String> rilevaViolazioniStandard(String codice) {\n        List<String> violazioni = new ArrayList<>();\n        // Esempio di pattern proibiti",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 35,
        "end_line": 38,
        "class": ""
    },
    {
        "id": 203,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n// Esempio di pattern proibiti\n        Pattern patternMagicNumber = Pattern.compile(\"\\\\b[0-9]+\\\\b\");\n        Matcher matcher = patternMagicNumber.matcher(codice);\n        while (matcher.find()) {",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 38,
        "end_line": 48,
        "class": ""
    },
    {
        "id": 204,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nwhile (matcher.find()) {\n            violazioni.add(\"Magic number trovato: \" + matcher.group());\n        }\n        // Aggiungi ulteriori pattern proibiti qui\n        return violazioni;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 48,
        "end_line": 53,
        "class": ""
    },
    {
        "id": 205,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nreturn violazioni;\n    }\n    /**\n     * Calcola la lunghezza media delle righe di codice\n     * @param codice Sorgente da analizzare\n     * @return Lunghezza media delle righe\n     */",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 53,
        "end_line": 60,
        "class": ""
    },
    {
        "id": 206,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n* @return Lunghezza media delle righe\n     */\n    private static int calcolaLunghezzaMediaRighe(String codice) {\n        String[] righe = codice.split(\"\\n\");\n        int totaleLunghezza = 0;\n        for (String riga : righe) {",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 60,
        "end_line": 66,
        "class": ""
    },
    {
        "id": 207,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nfor (String riga : righe) {\n            totaleLunghezza += riga.length();\n        }\n        return righe.length > 0 ? totaleLunghezza / righe.length : 0;\n    }\n    /**\n     * Conta il numero di commenti nel codice",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 66,
        "end_line": 72,
        "class": ""
    },
    {
        "id": 208,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n}\n    /**\n     * Conta il numero di commenti nel codice\n     * @param codice Sorgente da analizzare\n     * @return Numero di commenti\n     */\n    private static int contaCommenti(String codice) {",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 72,
        "end_line": 80,
        "class": ""
    },
    {
        "id": 209,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n*/\n    private static int contaCommenti(String codice) {\n        Pattern patternCommenti = Pattern.compile(\"//.*|/\\\\*[^*]*\\\\*+(?:[^/*][^*]*\\\\*+)*/\");\n        Matcher matcher = patternCommenti.matcher(codice);\n        int count = 0;",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 80,
        "end_line": 83,
        "class": ""
    },
    {
        "id": 210,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nint count = 0;\n        while (matcher.find()) {\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Calcola la complessità ciclomatica del codice\n     * @param codice Sorgente da analizzare",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 83,
        "end_line": 93,
        "class": ""
    },
    {
        "id": 211,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n* @param codice Sorgente da analizzare\n     * @return Complessità ciclomatica\n     */\n    private static int calcolaComplessitaCiclomatica(String codice) {\n        // Esempio semplificato: conta il numero di if, for, while, switch",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 93,
        "end_line": 99,
        "class": ""
    },
    {
        "id": 212,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nPattern pattern = Pattern.compile(\"\\\\b(if|for|while|switch)\\\\b\");\n        Matcher matcher = pattern.matcher(codice);\n        int count = 0;\n        while (matcher.find()) {\n            count++;\n        }\n        return count;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 99,
        "end_line": 104,
        "class": ""
    },
    {
        "id": 213,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n}\n        return count;\n    }\n    /**\n     * Suggerisce miglioramenti del codice basati sull'analisi\n     * @param codice Sorgente da analizzare\n     * @return Suggerimenti per migliorare il codice\n     */",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 104,
        "end_line": 107,
        "class": ""
    },
    {
        "id": 214,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n* @return Suggerimenti per migliorare il codice\n     */\n    public static List<String> suggerisciMiglioramenti(String codice) {\n        List<String> suggerimenti = new ArrayList<>();\n        // Esempio di suggerimenti",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 107,
        "end_line": 112,
        "class": ""
    },
    {
        "id": 215,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n// Esempio di suggerimenti\n        if (calcolaLunghezzaMediaRighe(codice) > 80) {\n            suggerimenti.add(\"Considera di ridurre la lunghezza media delle righe.\");\n        }\n        if (contaCommenti(codice) < 5) {",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 112,
        "end_line": 112,
        "class": ""
    },
    {
        "id": 216,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\n}\n        if (contaCommenti(codice) < 5) {\n            suggerimenti.add(\"Aggiungi più commenti per migliorare la leggibilità.\");\n        }\n        if (calcolaComplessitaCiclomatica(codice) > 10) {",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 112,
        "end_line": 112,
        "class": ""
    },
    {
        "id": 217,
        "text": "// File: my_project/classi_java_custom\\IspezionatoreCodice.java\nif (calcolaComplessitaCiclomatica(codice) > 10) {\n            suggerimenti.add(\"Riduci la complessità ciclomatica suddividendo il codice in metodi più piccoli.\");\n        }\n        return suggerimenti;\n    }",
        "source": "my_project/classi_java_custom\\IspezionatoreCodice.java",
        "type": "code",
        "start_line": 112,
        "end_line": 112,
        "class": ""
    },
    {
        "id": 218,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nClasse: MetricheAgili\npackage classi_java_custom;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\npublic class MetricheAgili {\n    /**\n     * Calcola il Velocity Score adattivo",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 1,
        "end_line": 11,
        "class": "MetricheAgili\n"
    },
    {
        "id": 219,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n/**\n     * Calcola il Velocity Score adattivo\n     * @param sprintData Dati storici degli sprint\n     * @param fattoreComplessità [1-5]\n     * @return Velocity predittivo con deviazione standard\n     */",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 11,
        "end_line": 16,
        "class": ""
    },
    {
        "id": 220,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n*/\n    public static double calcolaVelocityScore(List<Double> sprintData, int fattoreComplessità) {\n        if (sprintData == null || sprintData.isEmpty()) {",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 16,
        "end_line": 18,
        "class": ""
    },
    {
        "id": 221,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nif (sprintData == null || sprintData.isEmpty()) {\n            throw new IllegalArgumentException(\"I dati degli sprint non possono essere nulli o vuoti.\");\n        }\n        // Calcola la media dei dati storici degli sprint",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 18,
        "end_line": 22,
        "class": ""
    },
    {
        "id": 222,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n// Calcola la media dei dati storici degli sprint\n        double mediaVelocity = sprintData.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n        // Calcola la deviazione standard",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 22,
        "end_line": 26,
        "class": ""
    },
    {
        "id": 223,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n// Calcola la deviazione standard\n        double deviazioneStandard = Math.sqrt(sprintData.stream()\n                .mapToDouble(value -> Math.pow(value - mediaVelocity, 2))\n                .sum() / sprintData.size());",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 26,
        "end_line": 32,
        "class": ""
    },
    {
        "id": 224,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n.sum() / sprintData.size());\n        // Adatta il Velocity Score in base al fattore di complessità\n        double velocityScore = mediaVelocity * (1 + (fattoreComplessità - 3) * 0.1);",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 32,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 225,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nSystem.out.println(\"Velocity Score: \" + velocityScore);\n        System.out.println(\"Deviazione Standard: \" + deviazioneStandard);\n        return velocityScore;\n    }\n    /**\n     * Genera il rapporto di maturità agile",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 39,
        "end_line": 44,
        "class": ""
    },
    {
        "id": 226,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n    /**\n     * Genera il rapporto di maturità agile\n     * @param metriche Mappa di metriche chiave\n     * @return Rapporto strutturato in XML\n     */\n    public static String generaRapportoMaturita(Map<String, Double> metriche) {\n        try {",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 44,
        "end_line": 49,
        "class": ""
    },
    {
        "id": 227,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\ntry {\n            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n            // Creazione del documento XML",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 49,
        "end_line": 54,
        "class": ""
    },
    {
        "id": 228,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n// Creazione del documento XML\n            Document doc = docBuilder.newDocument();\n            Element rootElement = doc.createElement(\"RapportoMaturitaAgile\");\n            doc.appendChild(rootElement);",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 54,
        "end_line": 57,
        "class": ""
    },
    {
        "id": 229,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\ndoc.appendChild(rootElement);\n            // Aggiunta delle metriche al rapporto\n            for (Map.Entry<String, Double> entry : metriche.entrySet()) {\n                Element metricaElement = doc.createElement(\"Metrica\");",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 57,
        "end_line": 62,
        "class": ""
    },
    {
        "id": 230,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nmetricaElement.setAttribute(\"nome\", entry.getKey());\n                metricaElement.setAttribute(\"valore\", entry.getValue().toString());\n                rootElement.appendChild(metricaElement);\n            }",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 62,
        "end_line": 64,
        "class": ""
    },
    {
        "id": 231,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n            // Trasformazione del documento XML in stringa\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 64,
        "end_line": 69,
        "class": ""
    },
    {
        "id": 232,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            DOMSource source = new DOMSource(doc);\n            StreamResult result = new StreamResult(new StringWriter());\n            transformer.transform(source, result);",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 69,
        "end_line": 77,
        "class": ""
    },
    {
        "id": 233,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\ntransformer.transform(source, result);\n            return result.getWriter().toString();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Errore durante la generazione del rapporto di maturità agile\", e);\n        }\n    }",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 77,
        "end_line": 82,
        "class": ""
    },
    {
        "id": 234,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n    }\n    /**\n     * Calcola il Lead Time medio\n     * @param leadTimes Lista dei tempi di lead\n     * @return Lead Time medio\n     */\n    public static double calcolaLeadTimeMedio(List<Double> leadTimes) {",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 82,
        "end_line": 89,
        "class": ""
    },
    {
        "id": 235,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nif (leadTimes == null || leadTimes.isEmpty()) {\n            throw new IllegalArgumentException(\"I tempi di lead non possono essere nulli o vuoti.\");\n        }\n        return leadTimes.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 89,
        "end_line": 94,
        "class": ""
    },
    {
        "id": 236,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n    /**\n     * Analizza la qualità del codice basata su metriche chiave\n     * @param metriche Mappa di metriche chiave\n     * @return Analisi della qualità del codice\n     */",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 94,
        "end_line": 97,
        "class": ""
    },
    {
        "id": 237,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n* @return Analisi della qualità del codice\n     */\n    public static String analizzaQualitaCodice(Map<String, Double> metriche) {\n        // Esempio di analisi basata su metriche chiave",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 97,
        "end_line": 101,
        "class": ""
    },
    {
        "id": 238,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n// Esempio di analisi basata su metriche chiave\n        double codeCoverage = metriche.getOrDefault(\"CodeCoverage\", 0.0);\n        double codeComplexity = metriche.getOrDefault(\"CodeComplexity\", 0.0);",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 101,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 239,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\ndouble bugDensity = metriche.getOrDefault(\"BugDensity\", 0.0);\n        StringBuilder analisi = new StringBuilder();\n        analisi.append(\"Analisi della qualità del codice:\\n\");",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 103,
        "end_line": 108,
        "class": ""
    },
    {
        "id": 240,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nanalisi.append(\"Analisi della qualità del codice:\\n\");\n        analisi.append(\"Copertura del codice: \").append(codeCoverage).append(\"%\\n\");\n        analisi.append(\"Complessità del codice: \").append(codeComplexity).append(\"\\n\");",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 108,
        "end_line": 112,
        "class": ""
    },
    {
        "id": 241,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\nanalisi.append(\"Densità di bug: \").append(bugDensity).append(\" bug/KLOC\\n\");\n        if (codeCoverage < 80) {\n            analisi.append(\"Suggerimento: Aumentare la copertura del codice.\\n\");\n        }\n        if (codeComplexity > 10) {",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 112,
        "end_line": 117,
        "class": ""
    },
    {
        "id": 242,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n        if (codeComplexity > 10) {\n            analisi.append(\"Suggerimento: Ridurre la complessità del codice.\\n\");\n        }\n        if (bugDensity > 0.5) {\n            analisi.append(\"Suggerimento: Ridurre la densità di bug.\\n\");\n        }",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 117,
        "end_line": 117,
        "class": ""
    },
    {
        "id": 243,
        "text": "// File: my_project/classi_java_custom\\MetricheAgili.java\n}\n        return analisi.toString();\n    }",
        "source": "my_project/classi_java_custom\\MetricheAgili.java",
        "type": "code",
        "start_line": 117,
        "end_line": 117,
        "class": ""
    },
    {
        "id": 244,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\nClasse: MetricheProgettoSegrete\n// 2. Classe per il calcolo delle metriche di progetto riservate\npackage classi_java_custom;\npublic class MetricheProgettoSegrete {\n    /**\n     * Calcola l'indice di maturità tecnologica (IMT) secondo i parametri aziendali",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 1,
        "end_line": 5,
        "class": "MetricheProgettoSegrete\n"
    },
    {
        "id": 245,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\n* @param complessita Valori [1-5] da matrice di valutazione interna\n     * @param technicalDebt Ore di debito tecnico\n     * @param coperturaTest Percentuale di test automatizzati\n     * @return Valore IMT normalizzato\n     */",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 5,
        "end_line": 10,
        "class": ""
    },
    {
        "id": 246,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\n* @return Valore IMT normalizzato\n     */\n    public static double calcolaIMT(int[] complessita, int technicalDebt, double coperturaTest) {\n        if (complessita == null || complessita.length == 0) return 0.0;",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 10,
        "end_line": 14,
        "class": ""
    },
    {
        "id": 247,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\ndouble complessitaMedia = 0;\n        for (int val : complessita) {\n            complessitaMedia += val;\n        }\n        complessitaMedia /= complessita.length;",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 14,
        "end_line": 20,
        "class": ""
    },
    {
        "id": 248,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\ncomplessitaMedia /= complessita.length;\n        \n        double normalizzatoDebitoTecnico = Math.max(0, 100 - technicalDebt) / 100.0;\n        double normalizzatoCopertura = coperturaTest / 100.0;",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 20,
        "end_line": 23,
        "class": ""
    },
    {
        "id": 249,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\nreturn (0.5 * complessitaMedia + 0.3 * normalizzatoDebitoTecnico + 0.2 * normalizzatoCopertura);\n    }\n    /**\n     * Genera il codice di stato progetto secondo il formato aziendale\n     * @param imt Valore IMT calcolato",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 23,
        "end_line": 29,
        "class": ""
    },
    {
        "id": 250,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\n* @param imt Valore IMT calcolato\n     * @param rischi Valutazione rischi da 1 a 10\n     * @return Codice di stato criptico (es: \"AX3-R9\")\n     */\n    public static String generaCodiceStato(double imt, int rischi) {",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 29,
        "end_line": 34,
        "class": ""
    },
    {
        "id": 251,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\nString[] prefissi = {\"AX\", \"BX\", \"CX\", \"DX\", \"EX\"};\n        int indicePrefisso = Math.min((int) (imt * prefissi.length), prefissi.length - 1);\n        \n        return String.format(\"%s%d-R%d\", prefissi[indicePrefisso], (int) (imt * 10), rischi);",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 34,
        "end_line": 40,
        "class": ""
    },
    {
        "id": 252,
        "text": "// File: my_project/classi_java_custom\\MetricheProgettoSegrete.java\n}",
        "source": "my_project/classi_java_custom\\MetricheProgettoSegrete.java",
        "type": "code",
        "start_line": 40,
        "end_line": 40,
        "class": ""
    },
    {
        "id": 253,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nClasse: OrchestratoreTest\npackage classi_java_custom;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.stream.Collectors;\npublic class OrchestratoreTest {\n    /**",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 1,
        "end_line": 11,
        "class": "OrchestratoreTest\n"
    },
    {
        "id": 254,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nClasse: OrchestratoreTest\npublic class OrchestratoreTest {\n    /**\n     * Pianifica esecuzione test in base alla criticalità\n     * @param suiteTest Lista dei test disponibili\n     * @param priorita Mappa delle priorità\n     * @return Sequenza ottimizzata di esecuzione\n     */",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 11,
        "end_line": 17,
        "class": "OrchestratoreTest\n"
    },
    {
        "id": 255,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n* @return Sequenza ottimizzata di esecuzione\n     */\n    public static List<String> pianificaEsecuzioneTest(List<String> suiteTest, Map<String, Integer> priorita) {\n        // Ordina i test in base alla priorità\n        return suiteTest.stream()",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 17,
        "end_line": 20,
        "class": ""
    },
    {
        "id": 256,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nreturn suiteTest.stream()\n                .sorted(Comparator.comparingInt(test -> priorita.getOrDefault(test, 0)))\n                .collect(Collectors.toList());\n    }\n    /**\n     * Analizza la copertura del codice post-test",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 20,
        "end_line": 28,
        "class": ""
    },
    {
        "id": 257,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n}\n    /**\n     * Analizza la copertura del codice post-test\n     * @param risultatiTest Dettaglio esecuzione\n     * @param codiceSorgente Codice analizzato\n     * @return Report di copertura avanzato\n     */",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 28,
        "end_line": 32,
        "class": ""
    },
    {
        "id": 258,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n* @return Report di copertura avanzato\n     */\n    public static String analizzaCopertura(List<TestResult> risultatiTest, String codiceSorgente) {\n        // Esempio di strumentazione code avanzato (simulato)",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 32,
        "end_line": 37,
        "class": ""
    },
    {
        "id": 259,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n// Esempio di strumentazione code avanzato (simulato)\n        StringBuilder report = new StringBuilder();\n        report.append(\"Report di copertura avanzato:\\n\");\n        // Calcola la copertura del codice",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 37,
        "end_line": 41,
        "class": ""
    },
    {
        "id": 260,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n// Calcola la copertura del codice\n        int lineeTotali = codiceSorgente.split(\"\\n\").length;\n        int lineeCoperte = risultatiTest.stream()\n                .mapToInt(TestResult::getLineeCoperte)\n                .sum();",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 41,
        "end_line": 46,
        "class": ""
    },
    {
        "id": 261,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n.sum();\n        double coperturaPercentuale = (double) lineeCoperte / lineeTotali * 100;\n        report.append(\"Copertura del codice: \").append(coperturaPercentuale).append(\"%\\n\");\n        // Aggiungi dettagli sui test falliti",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 46,
        "end_line": 52,
        "class": ""
    },
    {
        "id": 262,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n// Aggiungi dettagli sui test falliti\n        List<TestResult> testFalliti = risultatiTest.stream()\n                .filter(TestResult::isFailed)\n                .collect(Collectors.toList());\n        if (!testFalliti.isEmpty()) {",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 52,
        "end_line": 56,
        "class": ""
    },
    {
        "id": 263,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nif (!testFalliti.isEmpty()) {\n            report.append(\"Test falliti:\\n\");\n            for (TestResult test : testFalliti) {",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 56,
        "end_line": 63,
        "class": ""
    },
    {
        "id": 264,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nfor (TestResult test : testFalliti) {\n                report.append(\"Test: \").append(test.getNomeTest()).append(\" - Motivo: \").append(test.getMotivoFallimento()).append(\"\\n\");\n            }\n        } else {",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 63,
        "end_line": 68,
        "class": ""
    },
    {
        "id": 265,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n}\n        } else {\n            report.append(\"Tutti i test sono passati con successo.\\n\");\n        }\n        return report.toString();\n    }\n    /**\n     * Genera un report dettagliato dei test\n     * @param risultatiTest Dettaglio esecuzione",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 68,
        "end_line": 72,
        "class": ""
    },
    {
        "id": 266,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n* @param risultatiTest Dettaglio esecuzione\n     * @return Report dettagliato dei test\n     */\n    public static String generaReportTest(List<TestResult> risultatiTest) {\n        StringBuilder report = new StringBuilder();",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 72,
        "end_line": 82,
        "class": ""
    },
    {
        "id": 267,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nStringBuilder report = new StringBuilder();\n        report.append(\"Report dettagliato dei test:\\n\");\n        for (TestResult test : risultatiTest) {\n            report.append(\"Test: \").append(test.getNomeTest())",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 82,
        "end_line": 86,
        "class": ""
    },
    {
        "id": 268,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\nreport.append(\"Test: \").append(test.getNomeTest())\n                    .append(\" - Stato: \").append(test.isFailed() ? \"Fallito\" : \"Passato\")\n                    .append(\" - Linee coperte: \").append(test.getLineeCoperte())",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 86,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 269,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n.append(\"\\n\");\n        }\n        return report.toString();\n    }\n    /**\n     * Identifica i test falliti\n     * @param risultatiTest Dettaglio esecuzione\n     * @return Lista dei test falliti\n     */",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 92,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 270,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n* @return Lista dei test falliti\n     */\n    public static List<String> identificaTestFalliti(List<TestResult> risultatiTest) {\n        return risultatiTest.stream()\n                .filter(TestResult::isFailed)",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 92,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 271,
        "text": "// File: my_project/classi_java_custom\\OrchestratoreTest.java\n.filter(TestResult::isFailed)\n                .map(TestResult::getNomeTest)\n                .collect(Collectors.toList());\n    }",
        "source": "my_project/classi_java_custom\\OrchestratoreTest.java",
        "type": "code",
        "start_line": 92,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 272,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nClasse: OttimizzatoreQuery\npackage classi_java_custom;\npublic class OttimizzatoreQuery {\n   /**\n     * Applica le regole di ottimizzazione del motore \"TurboSQL\"\n     * @param query Query SQL originale\n     * @param schema Struttura del database",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 1,
        "end_line": 9,
        "class": "OttimizzatoreQuery\n"
    },
    {
        "id": 273,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n* @param schema Struttura del database\n     * @return Query ottimizzata con hint speciali\n     */\n    public static String ottimizzaQuery(String query, String schema) {\n        // Esempio di ottimizzazione: aggiungere hint per l'uso di indici",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 9,
        "end_line": 14,
        "class": ""
    },
    {
        "id": 274,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nString ottimizzata = query;\n        // Riconoscimento di pattern per ottimizzare le query\n        Pattern selectPattern = Pattern.compile(\"(?i)SELECT\\\\s+.*?\\\\s+FROM\\\\s+(\\\\w+)\", Pattern.MULTILINE);",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 14,
        "end_line": 18,
        "class": ""
    },
    {
        "id": 275,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nMatcher matcher = selectPattern.matcher(query);\n        while (matcher.find()) {\n            String tableName = matcher.group(1);\n            // Aggiungi hint per l'uso di indici\n            String hint = \"/*+ INDEX(\" + tableName + \"_idx) */ \";",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 18,
        "end_line": 24,
        "class": ""
    },
    {
        "id": 276,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nottimizzata = ottimizzata.replaceFirst(\"FROM\\\\s+\" + tableName, \"FROM \" + hint + tableName);\n        }\n        // Altre ottimizzazioni possono essere aggiunte qui\n        return ottimizzata;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 24,
        "end_line": 31,
        "class": ""
    },
    {
        "id": 277,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nreturn ottimizzata;\n    }\n    /**\n     * Calcola il punteggio di efficienza della query\n     * @param query Plan di esecuzione\n     * @return Punteggio TQE (Total Query Efficiency)\n     */\n    public static double calcolaTQE(String query) {",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 31,
        "end_line": 37,
        "class": ""
    },
    {
        "id": 278,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n*/\n    public static double calcolaTQE(String query) {\n        // Esempio di calcolo del punteggio TQE basato su un modello di machine learning interno\n        // Supponiamo che il modello restituisca un punteggio tra 0 e 100",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 37,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 279,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n// Questo è un esempio semplificato; in pratica, si potrebbe usare un modello ML reale\n        // Analisi del piano di esecuzione (simulato)\n        int numJoins = countOccurrences(query, \"JOIN\");",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 39,
        "end_line": 44,
        "class": ""
    },
    {
        "id": 280,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nint numJoins = countOccurrences(query, \"JOIN\");\n        int numSubqueries = countOccurrences(query, \"SELECT\");\n        int numIndexHints = countOccurrences(query, \"INDEX\");\n        // Calcolo del punteggio TQE",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 44,
        "end_line": 48,
        "class": ""
    },
    {
        "id": 281,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n// Calcolo del punteggio TQE\n        double tqe = 100.0 - (numJoins * 5) - (numSubqueries * 3) + (numIndexHints * 7);\n        return Math.max(0, Math.min(100, tqe));\n    }\n    /**\n     * Conta le occorrenze di una parola chiave nella query",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 48,
        "end_line": 57,
        "class": ""
    },
    {
        "id": 282,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n* Conta le occorrenze di una parola chiave nella query\n     * @param query Query SQL\n     * @param keyword Parola chiave da contare\n     * @return Numero di occorrenze\n     */\n    private static int countOccurrences(String query, String keyword) {",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 57,
        "end_line": 62,
        "class": ""
    },
    {
        "id": 283,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nPattern pattern = Pattern.compile(keyword, Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(query);\n        int count = 0;\n        while (matcher.find()) {\n            count++;\n        }\n        return count;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 62,
        "end_line": 73,
        "class": ""
    },
    {
        "id": 284,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n}\n        return count;\n    }\n    /**\n     * Suggerisce indici basati sull'analisi della query\n     * @param query Query SQL\n     * @return Suggerimenti per indici\n     */\n    public static String suggerisciIndici(String query) {",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 73,
        "end_line": 75,
        "class": ""
    },
    {
        "id": 285,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\npublic static String suggerisciIndici(String query) {\n        // Esempio di suggerimento di indici basato su pattern riconosciuti\n        Pattern selectPattern = Pattern.compile(\"(?i)SELECT\\\\s+.*?\\\\s+FROM\\\\s+(\\\\w+)\", Pattern.MULTILINE);",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 75,
        "end_line": 80,
        "class": ""
    },
    {
        "id": 286,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nMatcher matcher = selectPattern.matcher(query);\n        StringBuilder suggerimenti = new StringBuilder();\n        while (matcher.find()) {\n            String tableName = matcher.group(1);",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 80,
        "end_line": 89,
        "class": ""
    },
    {
        "id": 287,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nString tableName = matcher.group(1);\n            suggerimenti.append(\"Considera di aggiungere un indice su \").append(tableName).append(\".\\n\");\n        }\n        return suggerimenti.toString();\n    }\n    /**",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 89,
        "end_line": 95,
        "class": ""
    },
    {
        "id": 288,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\n}\n        return suggerimenti.toString();\n    }\n    /**\n     * Analizza la complessità della query\n     * @param query Query SQL\n     * @return Livello di complessità\n     */\n    public static String analizzaComplessita(String query) {",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 95,
        "end_line": 100,
        "class": ""
    },
    {
        "id": 289,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\npublic static String analizzaComplessita(String query) {\n        int numJoins = countOccurrences(query, \"JOIN\");\n        int numSubqueries = countOccurrences(query, \"SELECT\");\n        if (numJoins > 5 || numSubqueries > 3) {",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 100,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 290,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nif (numJoins > 5 || numSubqueries > 3) {\n            return \"Complessità elevata\";\n        } else if (numJoins > 2 || numSubqueries > 1) {\n            return \"Complessità media\";\n        } else {\n            return \"Complessità bassa\";\n        }",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 103,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 291,
        "text": "// File: my_project/classi_java_custom\\OttimizzatoreQuery.java\nreturn \"Complessità bassa\";\n        }\n    }\n}",
        "source": "my_project/classi_java_custom\\OttimizzatoreQuery.java",
        "type": "code",
        "start_line": 103,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 292,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nClasse: SupervisorePerformance\npackage classi_java_custom;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\npublic class SupervisorePerformance {\n    /**\n     * Calcola l'indice di salute del sistema (SHI)",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 1,
        "end_line": 11,
        "class": "SupervisorePerformance\n"
    },
    {
        "id": 293,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n/**\n     * Calcola l'indice di salute del sistema (SHI)\n     * @param metriche Dati in tempo reale\n     * @return Valore SHI con trend\n     */\n    public static double calcolaSHI(Map<String, Double> metriche) {",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 11,
        "end_line": 16,
        "class": ""
    },
    {
        "id": 294,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n// Esempio di calcolo dell'indice di salute del sistema (SHI)\n        double cpuUsage = metriche.getOrDefault(\"cpuUsage\", 0.0);\n        double memoryUsage = metriche.getOrDefault(\"memoryUsage\", 0.0);",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 16,
        "end_line": 19,
        "class": ""
    },
    {
        "id": 295,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\ndouble responseTime = metriche.getOrDefault(\"responseTime\", 0.0);\n        double errorRate = metriche.getOrDefault(\"errorRate\", 0.0);\n        // Formula pesata con coefficienti dinamici\n        double weightCpu = 0.4;",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 19,
        "end_line": 24,
        "class": ""
    },
    {
        "id": 296,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\ndouble weightCpu = 0.4;\n        double weightMemory = 0.3;\n        double weightResponse = 0.2;\n        double weightError = 0.1;\n        double shi = (cpuUsage * weightCpu) + (memoryUsage * weightMemory) +",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 24,
        "end_line": 29,
        "class": ""
    },
    {
        "id": 297,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n(responseTime * weightResponse) + (errorRate * weightError);\n        // Normalizza il valore SHI tra 0 e 100\n        shi = Math.max(0, Math.min(100, shi));\n        System.out.println(\"SHI: \" + shi);\n        return shi;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 29,
        "end_line": 39,
        "class": ""
    },
    {
        "id": 298,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nreturn shi;\n    }\n    /**\n     * Genera allarmi predittivi basati su machine learning\n     * @param datiStorici Serie temporale di metriche\n     * @return Lista di allarmi con priorità\n     */",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 39,
        "end_line": 43,
        "class": ""
    },
    {
        "id": 299,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n* @return Lista di allarmi con priorità\n     */\n    public static List<String> generaAllarmiPredittivi(List<Double> datiStorici) {\n        // Esempio di generazione di allarmi predittivi utilizzando un modello LSTM (simulato)",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 43,
        "end_line": 47,
        "class": ""
    },
    {
        "id": 300,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nList<String> allarmi = new ArrayList<>();\n        // Simulazione di un modello LSTM che prevede anomalie\n        for (int i = 0; i < datiStorici.size(); i++) {\n            double valore = datiStorici.get(i);",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 47,
        "end_line": 51,
        "class": ""
    },
    {
        "id": 301,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\ndouble valore = datiStorici.get(i);\n            if (valore > 80) { // Soglia di allarme simulata\n                allarmi.add(\"Allarme: Valore anomalo rilevato al tempo \" + i);\n            }\n        }\n        return allarmi;\n    }\n    /**",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 51,
        "end_line": 61,
        "class": ""
    },
    {
        "id": 302,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n}\n        }\n        return allarmi;\n    }\n    /**\n     * Analizza le anomalie nelle metriche\n     * @param metriche Dati in tempo reale\n     * @return Report delle anomalie rilevate\n     */",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 61,
        "end_line": 65,
        "class": ""
    },
    {
        "id": 303,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n* @return Report delle anomalie rilevate\n     */\n    public static String analizzaAnomalie(Map<String, Double> metriche) {\n        StringBuilder report = new StringBuilder();\n        report.append(\"Report delle anomalie rilevate:\\n\");",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 65,
        "end_line": 71,
        "class": ""
    },
    {
        "id": 304,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nreport.append(\"Report delle anomalie rilevate:\\n\");\n        if (metriche.getOrDefault(\"cpuUsage\", 0.0) > 90) {\n            report.append(\"Anomalia: CPU usage elevato.\\n\");\n        }\n        if (metriche.getOrDefault(\"memoryUsage\", 0.0) > 85) {",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 71,
        "end_line": 76,
        "class": ""
    },
    {
        "id": 305,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nif (metriche.getOrDefault(\"memoryUsage\", 0.0) > 85) {\n            report.append(\"Anomalia: Memory usage elevato.\\n\");\n        }\n        if (metriche.getOrDefault(\"responseTime\", 0.0) > 500) {",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 76,
        "end_line": 85,
        "class": ""
    },
    {
        "id": 306,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nif (metriche.getOrDefault(\"responseTime\", 0.0) > 500) {\n            report.append(\"Anomalia: Response time elevato.\\n\");\n        }\n        if (metriche.getOrDefault(\"errorRate\", 0.0) > 5) {",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 85,
        "end_line": 89,
        "class": ""
    },
    {
        "id": 307,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nif (metriche.getOrDefault(\"errorRate\", 0.0) > 5) {\n            report.append(\"Anomalia: Error rate elevato.\\n\");\n        }\n        return report.toString();\n    }\n    /**\n     * Visualizza i trend delle metriche",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 89,
        "end_line": 93,
        "class": ""
    },
    {
        "id": 308,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n}\n    /**\n     * Visualizza i trend delle metriche\n     * @param datiStorici Serie temporale di metriche\n     * @return Visualizzazione dei trend\n     */\n    public static String visualizzaTrend(List<Double> datiStorici) {",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 93,
        "end_line": 98,
        "class": ""
    },
    {
        "id": 309,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nStringBuilder trendReport = new StringBuilder();\n        trendReport.append(\"Trend delle metriche:\\n\");\n        // Esempio di visualizzazione dei trend (semplificato)",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 98,
        "end_line": 104,
        "class": ""
    },
    {
        "id": 310,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\n// Esempio di visualizzazione dei trend (semplificato)\n        double media = datiStorici.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n        trendReport.append(\"Media: \").append(media).append(\"\\n\");",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 104,
        "end_line": 104,
        "class": ""
    },
    {
        "id": 311,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\ndouble varianza = datiStorici.stream()\n                .mapToDouble(value -> Math.pow(value - media, 2))\n                .sum() / datiStorici.size();\n        trendReport.append(\"Varianza: \").append(varianza).append(\"\\n\");",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 104,
        "end_line": 104,
        "class": ""
    },
    {
        "id": 312,
        "text": "// File: my_project/classi_java_custom\\SupervisorePerformance.java\nreturn trendReport.toString();\n    }",
        "source": "my_project/classi_java_custom\\SupervisorePerformance.java",
        "type": "code",
        "start_line": 104,
        "end_line": 104,
        "class": ""
    },
    {
        "id": 313,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\npackage classi_java_custom;\nimport org.json.JSONObject;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 1,
        "end_line": 9,
        "class": ""
    },
    {
        "id": 314,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nClasse: TrasformatoreDati\nimport java.util.Base64;\npublic class TrasformatoreDati {\n    private static final String ALGORITMO = \"AES\";\n    /**\n     * Applica la trasformazione \"ShadowMask\" ai dati sensibili\n     * @param dati Originali in formato JSON",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 9,
        "end_line": 18,
        "class": "TrasformatoreDati\n"
    },
    {
        "id": 315,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n* @param dati Originali in formato JSON\n     * @return Dati anonimizzati con preservazione formati\n     */\n    public static String applicaShadowMask(String dati) {\n        try {\n            // Genera una chiave segreta",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 18,
        "end_line": 23,
        "class": ""
    },
    {
        "id": 316,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\ntry {\n            // Genera una chiave segreta\n            KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITMO);\n            keyGen.init(128);\n            SecretKey chiaveSegreta = keyGen.generateKey();",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 23,
        "end_line": 28,
        "class": ""
    },
    {
        "id": 317,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nSecretKey chiaveSegreta = keyGen.generateKey();\n            String chiaveBase64 = Base64.getEncoder().encodeToString(chiaveSegreta.getEncoded());\n            // Cifra i dati\n            Cipher cipher = Cipher.getInstance(ALGORITMO);",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 28,
        "end_line": 32,
        "class": ""
    },
    {
        "id": 318,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nCipher cipher = Cipher.getInstance(ALGORITMO);\n            cipher.init(Cipher.ENCRYPT_MODE, chiaveSegreta);\n            byte[] datiCifrati = cipher.doFinal(dati.getBytes(StandardCharsets.UTF_8));",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 32,
        "end_line": 36,
        "class": ""
    },
    {
        "id": 319,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nString datiCifratiBase64 = Base64.getEncoder().encodeToString(datiCifrati);\n            // Crea un JSON con i dati cifrati e la chiave\n            JSONObject json = new JSONObject();\n            json.put(\"dati\", datiCifratiBase64);",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 36,
        "end_line": 41,
        "class": ""
    },
    {
        "id": 320,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\njson.put(\"dati\", datiCifratiBase64);\n            json.put(\"chiave\", chiaveBase64);\n            return json.toString();\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 41,
        "end_line": 47,
        "class": ""
    },
    {
        "id": 321,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n} catch (Exception e) {\n            throw new RuntimeException(\"Errore durante l'applicazione della trasformazione ShadowMask\", e);\n        }\n    }\n    /**\n     * Inverte la trasformazione ShadowMask\n     * @param datiTrasformati Dati mascherati",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 47,
        "end_line": 54,
        "class": ""
    },
    {
        "id": 322,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n* @param datiTrasformati Dati mascherati\n     * @param chiavePrivata Chiave di ri-identificazione\n     * @return Dati originali\n     */\n    public static String rimuoviShadowMask(String datiTrasformati, String chiavePrivata) {\n        try {",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 54,
        "end_line": 59,
        "class": ""
    },
    {
        "id": 323,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\ntry {\n            // Decodifica il JSON\n            JSONObject json = new JSONObject(datiTrasformati);\n            String datiCifratiBase64 = json.getString(\"dati\");\n            String chiaveBase64 = json.getString(\"chiave\");",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 59,
        "end_line": 63,
        "class": ""
    },
    {
        "id": 324,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nString chiaveBase64 = json.getString(\"chiave\");\n            // Decodifica la chiave\n            byte[] chiaveDecodificata = Base64.getDecoder().decode(chiaveBase64);",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 63,
        "end_line": 65,
        "class": ""
    },
    {
        "id": 325,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nSecretKey chiaveSegreta = new SecretKeySpec(chiaveDecodificata, 0, chiaveDecodificata.length, ALGORITMO);\n            // Decifra i dati\n            Cipher cipher = Cipher.getInstance(ALGORITMO);",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 65,
        "end_line": 69,
        "class": ""
    },
    {
        "id": 326,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nCipher cipher = Cipher.getInstance(ALGORITMO);\n            cipher.init(Cipher.DECRYPT_MODE, chiaveSegreta);\n            byte[] datiDecifrati = cipher.doFinal(Base64.getDecoder().decode(datiCifratiBase64));",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 69,
        "end_line": 77,
        "class": ""
    },
    {
        "id": 327,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nreturn new String(datiDecifrati, StandardCharsets.UTF_8);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Errore durante l'inversione della trasformazione ShadowMask\", e);\n        }\n    }\n    /**",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 77,
        "end_line": 82,
        "class": ""
    },
    {
        "id": 328,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n}\n    }\n    /**\n     * Genera una chiave privata per la trasformazione ShadowMask\n     * @return Chiave privata in formato Base64\n     */\n    public static String generaChiavePrivata() {\n        try {",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 82,
        "end_line": 84,
        "class": ""
    },
    {
        "id": 329,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\npublic static String generaChiavePrivata() {\n        try {\n            KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITMO);\n            keyGen.init(128);\n            SecretKey chiaveSegreta = keyGen.generateKey();",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 84,
        "end_line": 92,
        "class": ""
    },
    {
        "id": 330,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nSecretKey chiaveSegreta = keyGen.generateKey();\n            return Base64.getEncoder().encodeToString(chiaveSegreta.getEncoded());\n        } catch (Exception e) {",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 92,
        "end_line": 96,
        "class": ""
    },
    {
        "id": 331,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n} catch (Exception e) {\n            throw new RuntimeException(\"Errore durante la generazione della chiave privata\", e);\n        }\n    }\n    /**\n     * Verifica l'integrità dei dati trasformati\n     * @param datiTrasformati Dati mascherati",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 96,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 332,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n* @param datiTrasformati Dati mascherati\n     * @param chiavePrivata Chiave di ri-identificazione\n     * @return True se i dati sono integri, altrimenti false\n     */",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 103,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 333,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\n*/\n    public static boolean verificaIntegrita(String datiTrasformati, String chiavePrivata) {\n        try {\n            // Prova a decifrare i dati\n            rimuoviShadowMask(datiTrasformati, chiavePrivata);\n            return true;",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 103,
        "end_line": 103,
        "class": ""
    },
    {
        "id": 334,
        "text": "// File: my_project/classi_java_custom\\TrasformatoreDati.java\nreturn true;\n        } catch (Exception e) {\n            return false;\n        }\n    }",
        "source": "my_project/classi_java_custom\\TrasformatoreDati.java",
        "type": "code",
        "start_line": 103,
        "end_line": 103,
        "class": ""
    }
]